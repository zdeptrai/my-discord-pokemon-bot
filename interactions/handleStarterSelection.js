// interactions/handleStarterSelection.js
const { EmbedBuilder } = require('discord.js');
const { registerUser } = require('../utils/core/userUtils'); // ƒê√É S·ª¨A ƒê∆Ø·ªúNG D·∫™N
const { getPokemonInfo } = require('../utils/core/pokemonData'); 
const { sendOwnerDM } = require('../utils/errors/errorReporter'); // Import sendOwnerDM

/**
 * X·ª≠ l√Ω t∆∞∆°ng t√°c khi ng∆∞·ªùi d√πng ch·ªçn Pok√©mon kh·ªüi ƒë·∫ßu.
 * @param {Interaction} interaction - ƒê·ªëi t∆∞·ª£ng t∆∞∆°ng t√°c t·ª´ Discord.
 * @param {object} db - ƒê·ªëi t∆∞·ª£ng k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu Knex.
 */
async function handleStarterSelection(interaction, db) { 
    const userId = interaction.user.id;
    const starterId = interaction.customId.replace('select_starter_', '');

    const pokemonInfo = getPokemonInfo(starterId);

    if (!pokemonInfo) {
        console.error(`[STARTER_ERROR] Kh√¥ng t√¨m th·∫•y th√¥ng tin cho Pok√©mon ID: ${starterId} khi ng∆∞·ªùi d√πng ${userId} ch·ªçn.`);
        sendOwnerDM(interaction.client, `[L·ªói Starter] Kh√¥ng t√¨m th·∫•y th√¥ng tin Pok√©mon ID: ${starterId} khi ${interaction.user.tag} ch·ªçn.`, new Error(`Pok√©mon ID ${starterId} not found.`));
        try {
            await interaction.update({
                content: 'ƒê√£ x·∫£y ra l·ªói khi ch·ªçn Pok√©mon. Vui l√≤ng th·ª≠ l·∫°i.',
                embeds: [],
                components: []
            });
        } catch (e) {
            console.error("Could not update interaction for unknown pokemon:", e);
            sendOwnerDM(interaction.client, `[L·ªói Starter] Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t t∆∞∆°ng t√°c sau l·ªói Pok√©mon kh√¥ng t√¨m th·∫•y cho ${userId}.`, e);
        }
        return;
    }

    try {
        // ƒêƒÉng k√Ω ng∆∞·ªùi d√πng v√† Pok√©mon kh·ªüi ƒë·∫ßu v√†o database
        await registerUser(userId, pokemonInfo.name, db); 

        // G·ª≠i tin nh·∫Øn x√°c nh·∫≠n v·ªõi t√™n v√† h√¨nh ·∫£nh Pok√©mon
        const confirmationEmbed = new EmbedBuilder()
            .setColor(0x00FF00) 
            .setTitle(`üéâ Ch√∫c m·ª´ng, ${interaction.user.username}!`)
            .setDescription(`B·∫°n ƒë√£ ch·ªçn **${pokemonInfo.name}** l√†m Pok√©mon kh·ªüi ƒë·∫ßu c·ªßa m√¨nh!`)
            .setImage(pokemonInfo.imageUrl) 
            .setTimestamp()
            .setFooter({ text: 'H√†nh tr√¨nh c·ªßa b·∫°n ƒë√£ b·∫Øt ƒë·∫ßu!' });

        // C·∫≠p nh·∫≠t tin nh·∫Øn g·ªëc (ch·ªçn Pok√©mon) th√†nh tin nh·∫Øn x√°c nh·∫≠n
        try {
            await interaction.update({
                embeds: [confirmationEmbed],
                components: [] // X√≥a c√°c n√∫t b·∫•m sau khi ch·ªçn
            });
        } catch (e) {
            console.error("Could not update interaction with confirmation:", e);
            sendOwnerDM(interaction.client, `[L·ªói Starter] Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t t∆∞∆°ng t√°c v·ªõi x√°c nh·∫≠n cho ${userId}.`, e);
        }

        console.log(`[START] Ng∆∞·ªùi d√πng ${interaction.user.tag} ƒë√£ ch·ªçn ${pokemonInfo.name} l√†m Pok√©mon kh·ªüi ƒë·∫ßu.`);

    } catch (error) {
        console.error(`[STARTER_ERROR] L·ªói khi x·ª≠ l√Ω ch·ªçn Pok√©mon cho ${interaction.user.tag}:`, error);
        sendOwnerDM(interaction.client, `[L·ªói Starter] L·ªói khi x·ª≠ l√Ω ch·ªçn Pok√©mon cho ${interaction.user.tag}.`, error);
        try {
            await interaction.update({
                content: 'ƒê√£ x·∫£y ra l·ªói khi ƒëƒÉng k√Ω Pok√©mon c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.',
                embeds: [],
                components: []
            });
        } catch (e) {
            console.error("Could not update interaction for error:", e);
            sendOwnerDM(interaction.client, `[L·ªói Starter] Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t t∆∞∆°ng t√°c sau l·ªói chung cho ${userId}.`, e);
        }
    }
}

module.exports = {
    handleStarterSelection
};
