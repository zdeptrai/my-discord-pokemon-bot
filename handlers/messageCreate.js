const { Events, MessageFlags, Collection } = require('discord.js');
const { isUserRegistered } = require('../utils/core/userUtils'); 
const { deleteMessageWithTimeout } = require('../utils/core/commonUtils'); 
const { logErrorToFile } = require('../utils/errors/errorReporter'); 
const { getRandomInt, spawnPokemon } = require('../utils/managers/spawnManager');

// Import c√°c ch·ª©c nƒÉng c·∫ßn thi·∫øt t·ª´ xpManager v√† c√°c file m·ªõi
const { addXPAndCheckLevelUp, getOrCreateUserProfile } = require('../utils/managers/xpManager'); 
const { createPathSelectorEmbed } = require('../utils/ui/pathSelector');

// --- ƒê·ªäNH NGHƒ®A C√ÅC EMOJI T√ôY CH·ªàNH D√ôNG CHO BOT ---
const everyoneEmojis = ['‚úÖ', 'üéâ', 'üì¢'];
const botMentionEmojis = ['ü§ñ', 'üëã', 'üëÄ'];
// --- K·∫æT TH√öC ƒê·ªäNH NGHƒ®A ---

async function reactWithEmojis(message, emojis) {
    for (const emoji of emojis) {
        try {
            await message.react(emoji);
        } catch (error) {
            console.error(`[EMOJI_REACTION_ERROR] Kh√¥ng th·ªÉ ph·∫£n ·ª©ng v·ªõi emoji "${emoji}":`, error);
        }
    }
}

module.exports = {
    name: Events.MessageCreate,
    once: false,
    async execute(message) { 
        const client = message.client;
        const db = client.db;

        if (message.author.bot || message.webhookId) return;

        // Ph·∫£n ·ª©ng emoji khi c√≥ @everyone ho·∫∑c tag bot
        if (message.mentions.everyone) {
            await reactWithEmojis(message, everyoneEmojis);
        }
        
        if (message.mentions.has(client.user)) {
            await reactWithEmojis(message, botMentionEmojis);
        }

        // --- X·ª¨ L√ù H·ªÜ TH·ªêNG XP & C·∫§P ƒê·ªò ---
        // Ch√∫ng ta s·∫Ω x·ª≠ l√Ω XP cho m·ªçi tin nh·∫Øn kh√¥ng ph·∫£i l√† l·ªánh.
        if (!message.content.startsWith(client.config.PREFIX)) {
            // L·∫•y h·ªì s∆° ng∆∞·ªùi d√πng ƒë·ªÉ ki·ªÉm tra path_type
            const userProfile = await getOrCreateUserProfile(message.author.id, message.guild.id, db);

            // N·∫øu ng∆∞·ªùi d√πng ch∆∞a ch·ªçn l·ªëi ƒëi tu luy·ªán
            if (!userProfile.path_type) {
                // T·∫°o v√† g·ª≠i embed ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn
                const { embed, row } = createPathSelectorEmbed(message.author.id);
                
                await message.reply({ 
                    embeds: [embed], 
                    components: [row] 
                });
                
                return; // D·ª´ng x·ª≠ l√Ω XP cho ƒë·∫øn khi ng∆∞·ªùi d√πng ch·ªçn xong
            }

            // N·∫øu ng∆∞·ªùi d√πng ƒë√£ ch·ªçn l·ªëi ƒëi, ti·∫øp t·ª•c x·ª≠ l√Ω XP nh∆∞ b√¨nh th∆∞·ªùng
            await addXPAndCheckLevelUp(message, db);
            
            return;
        }
        
        // --- LOGIC X·ª¨ L√ù L·ªÜNH ---
        const args = message.content.slice(client.config.PREFIX.length).trim().split(/ +/);
        const commandName = args.shift().toLowerCase();

        const command = client.commands.get(commandName);

        if (!command || command.data) { 
            return;
        }

        const userId = message.author.id;
        
        if (commandName !== 'start' && commandName !== 'help' && commandName !== 'setchannel' && commandName !== 'pvp' && commandName !== 'st' && commandName !== 'startev' && commandName !== 'roll') { 
            const registered = await isUserRegistered(userId, db); 
            if (!registered) {
                await message.reply({
                    content: `<@${userId}> B·∫°n ch∆∞a b·∫Øt ƒë·∫ßu cu·ªôc phi√™u l∆∞u c·ªßa m√¨nh! Vui l√≤ng s·ª≠ d·ª•ng l·ªánh \`${client.config.PREFIX}start\` ƒë·ªÉ ƒëƒÉng k√Ω v√† b·∫Øt ƒë·∫ßu.`,
                    flags: MessageFlags.Ephemeral 
                }).catch(e => console.error("Could not send ephemeral reply to unregistered user message:", e));
                return;
            }
        }

        const { cooldowns } = client;

        if (!cooldowns.has(command.name)) {
            cooldowns.set(command.name, new Collection());
        }

        const now = Date.now(); 
        const timestamps = cooldowns.get(command.name);
        const defaultCooldownDuration = 3; 
        const cooldownAmount = (command.cooldown || defaultCooldownDuration) * 1000; 

        if (timestamps.has(message.author.id)) {
            const expirationTime = timestamps.get(message.author.id) + cooldownAmount;

            if (now < expirationTime) {
                await message.reply({
                    content: `<@${userId}> Vui l√≤ng ƒë·ª£i th√™m ${((expirationTime - now) / 1000).toFixed(1)} gi√¢y tr∆∞·ªõc khi s·ª≠ d·ª•ng l·∫°i l·ªánh \`${command.name}\`.`,
                    flags: MessageFlags.Ephemeral 
                }).catch(e => console.error("Could not send ephemeral cooldown message:", e));
                return;
            }
        }

        timestamps.set(message.author.id, now);
        setTimeout(() => timestamps.delete(message.author.id), cooldownAmount);

        try {
            await command.execute(message, args, client, db); 

            if (message.deletable && !message.flags.has(MessageFlags.Ephemeral) && !message.reference) {
                await deleteMessageWithTimeout(message, 100, `User command: ${commandName}`);
            }
        } catch (error) {
            console.error(`[COMMAND_EXECUTION_ERROR] L·ªói khi th·ª±c thi l·ªánh '${commandName}':`, error);
            logErrorToFile('COMMAND_EXECUTION_ERROR', message.author.tag, `L·ªói khi th·ª±c thi l·ªánh '${commandName}'`, error); 
            await message.reply({ 
                content: `<@${userId}> ƒê√£ c√≥ l·ªói x·∫£y ra khi th·ª±c thi l·ªánh n√†y! Vui l√≤ng th·ª≠ l·∫°i sau.`,
                flags: MessageFlags.Ephemeral 
            }).catch(e => console.error("Could not send ephemeral error message:", e));
        }
    },
};
