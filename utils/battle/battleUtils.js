// utils/battle/battleUtils.js
const { EmbedBuilder } = require('discord.js');

// ƒê·ªëi t∆∞·ª£ng √°nh x·∫° lo·∫°i k·ªπ nƒÉng sang emoji (L·∫•y t·ª´ viewskill ƒë·ªÉ ƒë·ªìng b·ªô)
const SKILL_TYPE_EMOJIS = {
    'normal': '‚ö™',
    'fire': 'üî•',
    'water': 'üíß',
    'grass': 'üçÉ',
    'electric': '‚ö°',
    'ice': '‚ùÑÔ∏è',
    'fighting': 'üëä',
    'poison': 'üß™',
    'ground': 'üåç',
    'flying': 'ü¶Ö',
    'psychic': 'üîÆ',
    'bug': 'üêõ',
    'rock': 'ü™®',
    'ghost': 'üëª',
    'dragon': 'üêâ',
    'steel': '‚öôÔ∏è',
    'dark': 'üåë',
    'fairy': '‚ú®',
    'unknown': '‚ùì', // D√†nh cho c√°c lo·∫°i kh√¥ng x√°c ƒë·ªãnh
};

/**
 * T·∫°o m·ªôt thanh HP d·∫°ng bi·ªÉu ƒë·ªì.
 * @param {number} currentHp HP hi·ªán t·∫°i.
 * @param {number} maxHp HP t·ªëi ƒëa.
 * @param {number} length ƒê·ªô d√†i c·ªßa thanh (s·ªë k√Ω t·ª±).
 * @returns {string} Chu·ªói bi·ªÉu th·ªã thanh HP.
 */
function generateHpBar(currentHp, maxHp, length = 10) {
    const percentage = currentHp / maxHp;
    const filledLength = Math.round(length * percentage);
    const emptyLength = length - filledLength;
    const filledBar = '‚ñà'.repeat(filledLength);
    const emptyBar = '‚ñë'.repeat(emptyLength);
    return `[${filledBar}${emptyBar}] \`${currentHp}/${maxHp}\``;
}

/**
 * H√†m t√≠nh EXP c·∫ßn thi·∫øt cho c·∫•p ƒë·ªô ti·∫øp theo.
 * @param {number} currentLevel C·∫•p ƒë·ªô hi·ªán t·∫°i c·ªßa Pok√©mon.
 * @returns {number} L∆∞·ª£ng EXP c·∫ßn ƒë·ªÉ l√™n c·∫•p ƒë·ªô ti·∫øp theo.
 */
const calculateExpToNextLevel = (currentLevel) => {
    return currentLevel * 100;
};

/**
 * T·∫°o m·ªôt Embed hi·ªÉn th·ªã chi ti·∫øt Pok√©mon c·ªßa ng∆∞·ªùi d√πng.
 * @param {Object} pokemon D·ªØ li·ªáu Pok√©mon c·ªßa ng∆∞·ªùi d√πng (t·ª´ user_pokemons join v·ªõi pokemons).
 * B√¢y gi·ªù bao g·ªìm c·∫£ 'skill_details' (m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng skill)
 * @param {number|null} currentSelectedId ID c·ªßa Pok√©mon hi·ªán ƒëang ƒë∆∞·ª£c ch·ªçn b·ªüi ng∆∞·ªùi d√πng.
 * @returns {EmbedBuilder}
 */
function generatePokemonEmbed(pokemon, currentSelectedId) {
    const totalIV = pokemon.hp_iv + pokemon.attack_iv + pokemon.defense_iv +
                    pokemon.special_attack_iv + pokemon.special_defense_iv + pokemon.speed_iv;
    const maxTotalIV = 31 * 6;
    const ivPercentage = ((totalIV / maxTotalIV) * 100).toFixed(2);

    let types = pokemon.type1;
    if (pokemon.type2) {
        types += `/${pokemon.type2}`;
    }

    let embedTitle = `${pokemon.nickname || pokemon.pokemon_name} (Lv.${pokemon.level})`;
    if (pokemon.id === currentSelectedId) {
        embedTitle = `‚≠ê ${embedTitle} (ƒêang ch·ªçn)`;
    }

    const expNeededForNextLevel = calculateExpToNextLevel(pokemon.level);

    const embed = new EmbedBuilder()
        .setColor(0x0099FF)
        .setTitle(embedTitle)
        .setDescription(
            `**Lo√†i:** ${pokemon.pokemon_name}\n` +
            `**Kinh nghi·ªám:** ${pokemon.experience}/${expNeededForNextLevel} (ƒë·ªÉ l√™n Lv.${pokemon.level + 1})\n` +
            `**HP:** ${pokemon.current_hp}/${pokemon.max_hp}\n` +
            `**Lo·∫°i:** ${types} | **ƒê·ªô hi·∫øm:** ${pokemon.rarity || 'Ch∆∞a x√°c ƒë·ªãnh'}\n`
        )
        .addFields(
            {
                name: 'Ch·ªâ s·ªë (Stats)',
                value: `‚ù§Ô∏è HP: **${pokemon.max_hp}**\n` +
                       `‚öîÔ∏è ATK: **${pokemon.attack}**\n` +
                       `üõ°Ô∏è DEF: **${pokemon.defense}**\n` +
                       `‚ú® SP.ATK: **${pokemon.special_attack}**\n` +
                       `üíé SP.DEF: **${pokemon.special_defense}**\n` +
                       `‚ö° SPD: **${pokemon.speed}**`,
                inline: true
            },
            {
                name: 'IVs (Individual Values)',
                value: `‚ù§Ô∏è HP: **${pokemon.hp_iv}/31**\n` +
                       `‚öîÔ∏è ATK: **${pokemon.attack_iv}/31**\n` +
                       `üõ°Ô∏è DEF: **${pokemon.defense_iv}/31**\n` +
                       `‚ú® SP.ATK: **${pokemon.special_attack_iv}/31**\n` +
                       `üíé SP.DEF: **${pokemon.special_defense_iv}/31**\n` +
                       `‚ö° SPD: **${pokemon.speed_iv}/31**`,
                inline: true
            },
            {
                name: '\u200b', // K√Ω t·ª± tr·ªëng ƒë·ªÉ th√™m kho·∫£ng c√°ch
                value: `\n**T·ªïng IV:** ${totalIV}/${maxTotalIV} (${ivPercentage}%)`,
                inline: false
            }
        )
        .setFooter({ text: `ID c·ªßa Pok√©mon: ${pokemon.id}` })
        .setTimestamp()
        .setImage(pokemon.image_url || pokemon.full_image_url);

    // --- Th√™m ph·∫ßn hi·ªÉn th·ªã k·ªπ nƒÉng ƒë√£ h·ªçc ---
    // Ki·ªÉm tra n·∫øu pokemon.skill_details t·ªìn t·∫°i v√† l√† m·ªôt m·∫£ng
    if (pokemon.skill_details && Array.isArray(pokemon.skill_details) && pokemon.skill_details.length > 0) {
        const skillText = pokemon.skill_details.map(skill => {
            const emoji = SKILL_TYPE_EMOJIS[skill.type.toLowerCase()] || SKILL_TYPE_EMOJIS['unknown'];
            return `${emoji} **${skill.name}** (ID: ${skill.skill_id}) - S·ª©c m·∫°nh: ${skill.power || 'N/A'} | PP: ${skill.pp || 'N/A'}`;
        }).join('\n');
        embed.addFields({ name: 'K·ªπ nƒÉng ƒë√£ h·ªçc', value: skillText, inline: false });
    } else {
        embed.addFields({ name: 'K·ªπ nƒÉng ƒë√£ h·ªçc', value: 'Ch∆∞a h·ªçc k·ªπ nƒÉng n√†o.', inline: false });
    }
    // --- K·∫øt th√∫c ph·∫ßn hi·ªÉn th·ªã k·ªπ nƒÉng ƒë√£ h·ªçc ---

    return embed;
}

/**
 * T·∫°o m·ªôt Embed hi·ªÉn th·ªã tr·∫°ng th√°i tr·∫≠n chi·∫øn v·ªõi hai Pok√©mon.
 * @param {Object} userPokemon - D·ªØ li·ªáu Pok√©mon c·ªßa ng∆∞·ªùi d√πng (t·ª´ user_pokemons).
 * @param {Object} wildPokemon - D·ªØ li·ªáu Pok√©mon hoang d√£ ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω (t·ª´ simulateBattle).
 * @param {string[]} battleLogLines - M·∫£ng c√°c d√≤ng nh·∫≠t k√Ω tr·∫≠n ƒë·∫•u.
 * @param {boolean} isInitial - true n·∫øu l√† Embed kh·ªüi t·∫°o tr·∫≠n ƒë·∫•u, false n·∫øu l√† c·∫≠p nh·∫≠t gi·ªØa ch·ª´ng.
 * @returns {EmbedBuilder}
 */
function generateBattleEmbed(userPokemon, wildPokemon, battleLogLines, isInitial = false) {
    let description = '';

    const playerImageUrl = userPokemon.sprite_back_url || userPokemon.image_url;
    const wildThumbnailUrl = wildPokemon.official_artwork_url || wildPokemon.sprite_front_url;

    const wildPokemonDisplayName = wildPokemon.pokemon_name || wildPokemon.name;

    if (isInitial) {
        description =
            `**${userPokemon.nickname || userPokemon.pokemon_name}** (Lv.${userPokemon.level}) c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng chi·∫øn ƒë·∫•u!\n` +
            `M·ªôt **${wildPokemonDisplayName}** hoang d√£ (Lv.${wildPokemon.level}) xu·∫•t hi·ªán!`;
    } else {
        const recentLogs = battleLogLines.slice(-3).join('\n'); // L·∫•y 3 d√≤ng log g·∫ßn nh·∫•t
        description = recentLogs;
    }

    const embed = new EmbedBuilder()
        .setColor(0xFFA500)
        .setTitle(`‚öîÔ∏è ${userPokemon.nickname || userPokemon.pokemon_name} vs. ${wildPokemonDisplayName}`)
        .addFields(
            {
                name: `C·ªßa b·∫°n: ${userPokemon.nickname || userPokemon.pokemon_name} (Lv.${userPokemon.level})`,
                value: `‚ù§Ô∏è HP: ${userPokemon.current_hp}/${userPokemon.max_hp}\n` +
                       `${generateHpBar(userPokemon.current_hp, userPokemon.max_hp, 15)}\n` + // Thanh HP c·ªßa ng∆∞·ªùi ch∆°i
                       `‚öîÔ∏è ATK: ${userPokemon.attack} | üõ°Ô∏è DEF: ${userPokemon.defense}\n` +
                       `‚ú® SP.ATK: ${userPokemon.special_attack} | üíé SP.DEF: ${userPokemon.special_defense}\n` +
                       `‚ö° SPD: ${userPokemon.speed}`,
                inline: true
            },
            {
                name: `ƒê·ªëi th·ªß: ${wildPokemonDisplayName} (Lv.${wildPokemon.level})`,
                value: `‚ù§Ô∏è HP: ${wildPokemon.current_hp}/${wildPokemon.max_hp}\n` +
                       `${generateHpBar(wildPokemon.current_hp, wildPokemon.max_hp, 15)}\n` + // Thanh HP c·ªßa Pok√©mon hoang d√£
                       `‚öîÔ∏è ATK: ${wildPokemon.attack} | üõ°Ô∏è DEF: ${wildPokemon.defense}\n` +
                       `‚ú® SP.ATK: ${wildPokemon.special_attack} | üíé SP.DEF: ${wildPokemon.special_defense}\n` +
                       `‚ö° SPD: ${wildPokemon.speed}`,
                inline: true
            }
        )
        .setDescription(description) // Log tr·∫≠n ƒë·∫•u ·ªü d∆∞·ªõi c√πng
        .setFooter({ text: 'Tr·∫≠n chi·∫øn ƒëang di·ªÖn ra...' })
        .setTimestamp();

    if (wildThumbnailUrl) {
        embed.setThumbnail(wildThumbnailUrl);
    }
    if (playerImageUrl) {
        embed.setImage(playerImageUrl);
    }

    return embed;
}

module.exports = {
    generatePokemonEmbed,
    generateBattleEmbed
};