// utils/dame/bossDungeonLogic.js
const { EmbedBuilder, MessageFlags } = require('discord.js'); 
const { getPokemonName, getPokemonStats, getRandomMysticalBoss } = require('../core/pokemonUtils'); 
const { generateHpBar } = require('../core/displayUtils'); 

const { getRandomRewardItem, addOrUpdateUserItem } = require('./itemUtils'); 
const { simulateBossBattle } = require('./battleSimulation'); 
const { getTypeEffectiveness } = require('./battleCalculations'); 

const BOSS_DUNGEON_COOLDOWN_HOURS = 8;
const MIN_POKEMON_LEVEL_FOR_BOSS = 10;

/**
 * ƒê·ªãnh d·∫°ng c√°c s·ª± ki·ªán tr·∫≠n ƒë·∫•u th√†nh chu·ªói log.
 * @param {object[]} events - M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng s·ª± ki·ªán tr·∫≠n ƒë·∫•u.
 * @returns {string[]} M·∫£ng c√°c chu·ªói log ƒë√£ ƒë·ªãnh d·∫°ng.
 */
function formatBattleEvents(events) {
    const logStrings = [];
    for (const event of events) {
        switch (event.type) {
            case 'start':
                logStrings.push(`--- B·∫Øt ƒë·∫ßu tr·∫≠n ƒë·∫•u: ${event.userPokemonName} (Lv ${event.userLevel}) vs ${event.bossPokemonName} (Lv ${event.bossLevel}) ---`);
                logStrings.push(`HP c·ªßa b·∫°n: ${event.userHp} | HP c·ªßa Boss: ${event.bossHp}`);
                break;
            case 'turn_order':
                if (event.order === 'user_first') {
                    logStrings.push(`\nüí® ${event.first} (T·ªëc ƒë·ªô: ${event.firstAttackerSpeed}) nhanh h∆°n ${event.second} (T·ªëc ƒë·ªô: ${event.secondAttackerSpeed})! ${event.first} t·∫•n c√¥ng tr∆∞·ªõc.`);
                } else if (event.order === 'boss_first') {
                    logStrings.push(`\nüí® ${event.first} (T·ªëc ƒë·ªô: ${event.firstAttackerSpeed}) nhanh h∆°n ${event.second} (T·ªëc ƒë·ªô: ${event.secondAttackerSpeed})! ${event.first} t·∫•n c√¥ng tr∆∞·ªõc.`);
                } else if (event.order === 'equal_speed_user_first') {
                    logStrings.push(`\nüí® ${event.first} v√† ${event.second} c√≥ c√πng t·ªëc ƒë·ªô (${event.firstAttackerSpeed}). ${event.first} t·∫•n c√¥ng tr∆∞·ªõc.`);
                }
                break;
            case 'attack':
                let critMsg = event.crit ? ' (Ch√≠ m·∫°ng!)' : '';
                let effMsg = '';
                if (event.effectiveness === 2.0) effMsg = ' (Si√™u hi·ªáu qu·∫£!)';
                else if (event.effectiveness === 0.5) effMsg = ' (Kh√¥ng hi·ªáu qu·∫£ l·∫Øm.)';
                else if (event.effectiveness === 0) effMsg = ' (Kh√¥ng c√≥ t√°c d·ª•ng!)';
                logStrings.push(`L${event.turn}: ${event.attackerName} d√πng **${event.skillName}** g√¢y **${event.damage} s√°t th∆∞∆°ng**!`);
                logStrings.push(`> ${event.defenderName} c√≤n **${Math.max(0, event.remainingHp)} HP**.`);
                break;
            case 'miss':
                logStrings.push(`L${event.turn}: ${event.attackerName} d√πng **${event.skillName}** nh∆∞ng tr∆∞·ª£t!`);
                break;
            case 'end':
                logStrings.push(`--- K·∫øt th√∫c tr·∫≠n ƒë·∫•u ---`);
                if (event.winner === 'user') {
                    logStrings.push(`B·∫°n c√≤n ${Math.max(0, event.userHp)} HP | Boss c√≤n 0 HP`);
                    logStrings.push(`Ch√∫c m·ª´ng! ${event.userPokemonName || 'Pok√©mon c·ªßa b·∫°n'} ƒë√£ ƒë√°nh b·∫°i ${event.bossPokemonName || 'Boss'}!`);
                } else {
                    logStrings.push(`B·∫°n c√≤n 0 HP | Boss c√≤n ${Math.max(0, event.bossHp)} HP`);
                    logStrings.push(`Th·∫•t b·∫°i! ${event.bossPokemonName || 'Boss'} ƒë√£ ƒë√°nh b·∫°i ${event.userPokemonName || 'Pok√©mon c·ªßa b·∫°n'}.`);
                }
                break;
            case 'end_max_turns':
                logStrings.push(`--- K·∫øt th√∫c tr·∫≠n ƒë·∫•u ---`);
                logStrings.push(`B·∫°n c√≤n ${Math.max(0, event.userHp)} HP | Boss c√≤n ${Math.max(0, event.bossHp)} HP`);
                logStrings.push('Tr·∫≠n ƒë·∫•u k·∫øt th√∫c sau gi·ªõi h·∫°n l∆∞·ª£t.');
                break;
        }
    }
    return logStrings;
}


/**
 * X·ª≠ l√Ω to√†n b·ªô logic cho l·ªánh ph√≥ b·∫£n boss.
 * @param {object} message - ƒê·ªëi t∆∞·ª£ng tin nh·∫Øn Discord.
 * @param {object} client - ƒê·ªëi t∆∞·ª£ng client Discord.
 * @param {object} db - Knex database instance.
 */
async function handleBossDungeon(message, client, db) {
    const userId = message.author.id;
    const userDisplayName = message.member ? message.member.displayName : message.author.displayName;

    try {
        // --- 1. Ki·ªÉm tra c·∫•u h√¨nh k√™nh c·ªßa guild (guild_settings) ---
        const guildSettings = await db('guild_settings')
            .where('guild_id', message.guild.id)
            .select('boss_channel_id')
            .first();

        if (!guildSettings || guildSettings.boss_channel_id !== message.channel.id) {
            let replyContent = `<@${userId}> L·ªánh n√†y ch·ªâ c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong k√™nh ph√≥ b·∫£n boss ƒë√£ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.`;
            if (guildSettings && !guildSettings.boss_channel_id) {
                replyContent += ` Ch·ªß server c·∫ßn thi·∫øt l·∫≠p k√™nh ph√≥ b·∫£n boss b·∫±ng l·ªánh \`${client.config.PREFIX}setchannel boss add\`.`;
            }
            return message.channel.send({
                content: replyContent,
                flags: MessageFlags.Ephemeral 
            });
        }

        // --- 2. L·∫•y th√¥ng tin ng∆∞·ªùi d√πng v√† Pok√©mon ƒë√£ ch·ªçn ---
        const user = await db('users')
            .where('discord_id', userId)
            .select('selected_pokemon_id', 'last_boss_dungeon_time')
            .first();

        if (!user) {
            return message.channel.send({
                content: `<@${userId}> B·∫°n ch∆∞a b·∫Øt ƒë·∫ßu cu·ªôc phi√™u l∆∞u c·ªßa m√¨nh! Vui l√≤ng s·ª≠ d·ª•ng l·ªánh \`${client.config.PREFIX}start\` ƒë·ªÉ ƒëƒÉng k√Ω.`,
                flags: MessageFlags.Ephemeral 
            });
        }

        if (!user.selected_pokemon_id) {
            return message.channel.send({
                content: `<@${userId}> B·∫°n c·∫ßn ch·ªçn m·ªôt Pok√©mon ƒë·ªÉ tham gia ph√≥ b·∫£n boss! S·ª≠ d·ª•ng l·ªánh \`${client.config.PREFIX}select <ID_Pok√©mon>\` ƒë·ªÉ ch·ªçn Pok√©mon.`,
                flags: MessageFlags.Ephemeral 
            });
        }

        const userPokemonRaw = await db('user_pokemons')
            .leftJoin('pokemons', 'user_pokemons.pokedex_id', 'pokemons.pokedex_id')
            .where('user_pokemons.id', user.selected_pokemon_id)
            .andWhere('user_pokemons.user_discord_id', userId)
            .select(
                'user_pokemons.*',
                'pokemons.name as pokemon_base_name',
                'pokemons.hp as base_hp',
                'pokemons.attack as base_attack',
                'pokemons.defense as base_defense',
                'pokemons.special_attack as base_special_attack',
                'pokemons.special_defense as base_special_defense',
                'pokemons.speed as base_speed',
                'pokemons.type1 as base_type1',
                'pokemons.type2 as base_type2',
                'pokemons.official_artwork_url as pokemon_image_url'
            )
            .first();
        
        if (!userPokemonRaw) {
            await db('users')
                .where('discord_id', userId)
                .update({ selected_pokemon_id: null });

            return message.channel.send({
                content: `<@${userId}> Pok√©mon ƒë√£ ch·ªçn c·ªßa b·∫°n kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ch·ªçn l·∫°i Pok√©mon kh√°c.`,
                flags: MessageFlags.Ephemeral 
            });
        }

        if (userPokemonRaw.level < MIN_POKEMON_LEVEL_FOR_BOSS) {
            return message.channel.send({
                content: `<@${userId}> Pok√©mon c·ªßa b·∫°n ph·∫£i ƒë·∫°t c·∫•p ƒë·ªô **${MIN_POKEMON_LEVEL_FOR_BOSS}** tr·ªü l√™n ƒë·ªÉ tham gia ph√≥ b·∫£n boss. Pok√©mon hi·ªán t·∫°i c·ªßa b·∫°n l√† c·∫•p **${userPokemonRaw.level}**.`,
                flags: MessageFlags.Ephemeral 
            });
        }

        // --- 3. Ki·ªÉm tra Cooldown Ph√≥ b·∫£n Boss cho ph·∫ßn th∆∞·ªüng ---
        let canGetReward = true;
        let cooldownTimeLeftMessage = '';
        if (user.last_boss_dungeon_time) {
            const lastDungeonTime = new Date(user.last_boss_dungeon_time);
            const cooldownEndTime = new Date(lastDungeonTime.getTime() + BOSS_DUNGEON_COOLDOWN_HOURS * 60 * 60 * 1000);
            const currentTime = new Date();

            if (currentTime < cooldownEndTime) {
                canGetReward = false;
                const timeLeftMs = cooldownEndTime.getTime() - currentTime.getTime();
                const hoursLeft = Math.floor(timeLeftMs / (1000 * 60 * 60));
                const minutesLeft = Math.ceil((timeLeftMs % (1000 * 60 * 60)) / (1000 * 60));
                cooldownTimeLeftMessage = ` (c√≤n **${hoursLeft} gi·ªù ${minutesLeft} ph√∫t** ƒë·ªÉ nh·∫≠n th∆∞·ªüng)`;
            }
        }

        // --- 4. Ch·ªçn Boss ng·∫´u nhi√™n (Mythical) ---
        const bossPokedexData = await getRandomMysticalBoss(db);

        if (!bossPokedexData) {
            return message.channel.send({
                content: `<@${userId}> Hi·ªán t·∫°i kh√¥ng c√≥ boss Mythical n√†o ƒë·ªÉ th√°ch ƒë·∫•u. Vui l√≤ng th·ª≠ l·∫°i sau.`,
                flags: MessageFlags.Ephemeral 
            });
        }

        // --- 5. T√≠nh to√°n ch·ªâ s·ªë cho Pok√©mon c·ªßa ng∆∞·ªùi d√πng v√† Boss ---
        const userPokemonStats = getPokemonStats(
            {
                hp: userPokemonRaw.base_hp,
                attack: userPokemonRaw.base_attack,
                defense: userPokemonRaw.base_defense,
                special_attack: userPokemonRaw.base_special_attack,
                special_defense: userPokemonRaw.base_special_defense,
                speed: userPokemonRaw.base_speed
            },
            userPokemonRaw.level,
            {
                hp_iv: userPokemonRaw.hp_iv,
                attack_iv: userPokemonRaw.attack_iv,
                defense_iv: userPokemonRaw.defense_iv,
                special_attack_iv: userPokemonRaw.special_attack_iv,
                special_defense_iv: userPokemonRaw.special_defense_iv,
                speed_iv: userPokemonRaw.speed_iv
            }
        );

        const bossLevel = userPokemonRaw.level; // Boss c√πng c·∫•p v·ªõi ng∆∞·ªùi ch∆°i
        const bossIVs = { hp_iv: 31, attack_iv: 31, defense_iv: 31, special_attack_iv: 31, special_defense_iv: 31, speed_iv: 31 }; // Boss c√≥ IVs t·ªëi ƒëa
        const bossStats = getPokemonStats(
            {
                hp: bossPokedexData.hp,
                attack: bossPokedexData.attack,
                defense: bossPokedexData.defense,
                special_attack: bossPokedexData.special_attack,
                special_defense: bossPokedexData.special_defense,
                speed: bossPokedexData.speed
            },
            bossLevel,
            bossIVs
        );
        
        // --- L·∫•y k·ªπ nƒÉng cho ng∆∞·ªùi ch∆°i v√† Boss ---
        let userSkillsData = []; // M·∫£ng ƒë·ªÉ l∆∞u t·∫•t c·∫£ k·ªπ nƒÉng ng∆∞·ªùi ch∆°i
        let bossSkillsData = []; // M·∫£ng ƒë·ªÉ l∆∞u t·∫•t c·∫£ k·ªπ nƒÉng t·∫•n c√¥ng c·ªßa boss

        // L·∫•y k·ªπ nƒÉng ng∆∞·ªùi ch∆°i ƒë√£ h·ªçc (t·ªëi ƒëa 4 k·ªπ nƒÉng)
        let learnedSkillsIds = [];
        try {
            learnedSkillsIds = JSON.parse(userPokemonRaw.learned_skill_ids || '[]');
            if (!Array.isArray(learnedSkillsIds)) {
                learnedSkillsIds = [];
            }
        } catch (parseError) {
            console.error(`L·ªói ph√¢n t√≠ch learned_skill_ids cho Pok√©mon ${userPokemonRaw.id}:`, parseError);
            learnedSkillsIds = [];
        }

        if (learnedSkillsIds.length > 0) {
            const skillsFromDb = await db('skills')
                .whereIn('skill_id', learnedSkillsIds)
                .select('*');
            
            // S·∫Øp x·∫øp l·∫°i k·ªπ nƒÉng theo th·ª© t·ª± trong learnedSkillsIds v√† gi·ªõi h·∫°n 4 k·ªπ nƒÉng
            userSkillsData = skillsFromDb
                .filter(skill => learnedSkillsIds.includes(skill.skill_id)) // ƒê·∫£m b·∫£o ƒë√∫ng k·ªπ nƒÉng ƒë√£ h·ªçc
                .sort((a, b) => learnedSkillsIds.indexOf(a.skill_id) - learnedSkillsIds.indexOf(b.skill_id)) // S·∫Øp x·∫øp theo th·ª© t·ª± h·ªçc
                .slice(0, 4); // Gi·ªõi h·∫°n t·ªëi ƒëa 4 k·ªπ nƒÉng
        }
        
        // N·∫øu ng∆∞·ªùi ch∆°i ch∆∞a h·ªçc ƒë·ªß 4 k·ªπ nƒÉng ho·∫∑c kh√¥ng c√≥ k·ªπ nƒÉng n√†o, th√™m Tackle m·∫∑c ƒë·ªãnh
        while (userSkillsData.length < 1) { // ƒê·∫£m b·∫£o √≠t nh·∫•t c√≥ 1 k·ªπ nƒÉng
            userSkillsData.push({
                name: 'Tackle',
                type: 'Normal',
                category: 'Physical',
                power: 40,
                accuracy: 100
            });
        }

        // L·∫•y k·ªπ nƒÉng t·∫•n c√¥ng c√≥ power cao nh·∫•t cho Boss
        // L·ªçc b·ªè c√°c k·ªπ nƒÉng c√≥ power = 0 ho·∫∑c NULL, v√† category l√† 'Status'
        const bossAttackSkills = await db('pokemon_skills')
            .where('pokemon_skills.pokedex_id', bossPokedexData.pokedex_id)
            .join('skills', 'pokemon_skills.skill_id', 'skills.skill_id')
            .whereNotNull('skills.power') // ƒê·∫£m b·∫£o power kh√¥ng ph·∫£i NULL
            .where('skills.power', '>', 0) // ƒê·∫£m b·∫£o power l·ªõn h∆°n 0
            .whereNot('skills.category', 'Status') // L·ªçc b·ªè c√°c k·ªπ nƒÉng Status (ch·ªØ 'S' hoa)
            .whereNot('skills.category', 'status') // L·ªçc b·ªè c√°c k·ªπ nƒÉng Status (ch·ªØ 's' th∆∞·ªùng)
            .orderBy('skills.power', 'desc') // S·∫Øp x·∫øp theo power gi·∫£m d·∫ßn
            .select('skills.*');

        if (bossAttackSkills.length > 0) {
            bossSkillsData = bossAttackSkills; // Gi·ªØ t·∫•t c·∫£ c√°c k·ªπ nƒÉng t·∫•n c√¥ng ƒë√£ s·∫Øp x·∫øp
        } else {
            console.warn(`[BOSS_DUNGEON_WARN] Boss ${bossPokedexData.name} (ID: ${bossPokedexData.pokedex_id}) kh√¥ng c√≥ k·ªπ nƒÉng t·∫•n c√¥ng n√†o h·ª£p l·ªá trong database. S·ª≠ d·ª•ng k·ªπ nƒÉng m·∫∑c ƒë·ªãnh.`);
            bossSkillsData.push({ // ƒê·∫£m b·∫£o l√† m·∫£ng
                name: 'Hyper Beam', // K·ªπ nƒÉng m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y k·ªπ nƒÉng t·∫•n c√¥ng
                type: 'Normal',
                category: 'Special',
                power: 150,
                accuracy: 90
            });
        }

        // T·∫°o ƒë·ªëi t∆∞·ª£ng Pok√©mon ho√†n ch·ªânh cho tr·∫≠n ƒë·∫•u
        const userPokemonForBattle = {
            ...userPokemonRaw,
            ...userPokemonStats, 
            name: userPokemonRaw.nickname || userPokemonRaw.pokemon_base_name,
            level: userPokemonRaw.level,
            type1: userPokemonRaw.base_type1,
            type2: userPokemonRaw.base_type2
        };

        const bossPokemonForBattle = {
            ...bossPokedexData,
            ...bossStats, 
            name: bossPokedexData.name,
            level: bossLevel,
            type1: bossPokedexData.type1,
            type2: bossPokedexData.type2
        };

        // --- 6. M√¥ ph·ªèng tr·∫≠n chi·∫øn ---
        const battleResult = await simulateBossBattle(userPokemonForBattle, bossPokemonForBattle, userSkillsData, bossSkillsData);

        // --- 7. Trao ph·∫ßn th∆∞·ªüng ng·∫´u nhi√™n (Item c√≥ value NULL) - ƒêI·ªÄU KI·ªÜN THEO COOLDOWN ---
        let rewardMessage = '';
        if (canGetReward) { // ƒê√É S·ª¨A: Ch·ªâ ki·ªÉm tra cooldown, kh√¥ng c√≤n ƒëi·ªÅu ki·ªán th·∫Øng tr·∫≠n
            const randomReward = await getRandomRewardItem(db);
            if (randomReward) {
                const rewardQuantity = Math.floor(Math.random() * 3) + 1; 
                await addOrUpdateUserItem(userId, randomReward.item_id, rewardQuantity, db);
                rewardMessage = `B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c **${rewardQuantity}x ${randomReward.name}**!`;

                // C·∫≠p nh·∫≠t cooldown ch·ªâ khi m·ªôt ph·∫ßn th∆∞·ªüng ƒë√£ ƒë∆∞·ª£c trao th√†nh c√¥ng
                await db('users')
                    .where('discord_id', userId)
                    .update({ last_boss_dungeon_time: db.fn.now() });
            } else {
                rewardMessage = 'B·∫°n ƒë·ªß ƒëi·ªÅu ki·ªán nh·∫≠n th∆∞·ªüng nh∆∞ng kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m n√†o.';
            }
        } else { // N·∫øu ƒëang trong th·ªùi gian h·ªìi chi√™u
            rewardMessage = `B·∫°n kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫ßn th∆∞·ªüng v√¨ ƒëang trong th·ªùi gian h·ªìi chi√™u${cooldownTimeLeftMessage}.`;
        }

        // --- 8. G·ª≠i Embed th√¥ng b√°o k·∫øt qu·∫£ ---
        const resultEmbed = new EmbedBuilder()
            .setColor(battleResult.userWin ? '#00FF00' : '#FF0000')
            .setTitle(`üí• K·∫øt Qu·∫£ Ph√≥ B·∫£n Boss! üí•`)
            .setDescription(`**${userDisplayName}** ƒë√£ th√°ch ƒë·∫•u v·ªõi **${bossPokemonForBattle.name} (C·∫•p ${bossPokemonForBattle.level})**!`)
            .addFields(
                { 
                    name: `[üõ°Ô∏è B·∫°n] ${userPokemonForBattle.nickname || userPokemonForBattle.pokemon_base_name} (Lv ${userPokemonForBattle.level})`, 
                    value: `${generateHpBar(Math.max(0, battleResult.userRemainingHp), userPokemonForBattle.hp)}\n` +
                           `‚öîÔ∏è ATK: ${userPokemonForBattle.attack} | üõ°Ô∏è DEF: ${userPokemonForBattle.defense}\n` +
                           `‚ú® SP.ATK: ${userPokemonForBattle.special_attack} | üíé SP.DEF: ${userPokemonForBattle.special_defense}\n` +
                           `üí® SPD: ${userPokemonForBattle.speed}`,
                    inline: false 
                },
                { 
                    name: `[üëπ Boss] ${bossPokemonForBattle.name} (Lv ${bossPokemonForBattle.level})`, 
                    value: `${generateHpBar(Math.max(0, battleResult.bossRemainingHp), bossPokemonForBattle.hp)}\n` +
                           `‚öîÔ∏è ATK: ${bossPokemonForBattle.attack} | üõ°Ô∏è DEF: ${bossPokemonForBattle.defense}\n` +
                           `‚ú® SP.ATK: ${bossPokemonForBattle.special_attack} | üíé SP.DEF: ${bossPokemonForBattle.special_defense}\n` +
                           `üí® SPD: ${bossPokemonForBattle.speed}`,
                    inline: false 
                },
                { name: 'K·∫øt Qu·∫£', value: battleResult.userWin ? '‚úÖ **CHI·∫æN TH·∫ÆNG!**' : '‚ùå **TH·∫§T B·∫†I!**', inline: false },
                { name: 'Ph·∫ßn Th∆∞·ªüng', value: rewardMessage, inline: false }
            )
            .setThumbnail(userPokemonRaw.pokemon_image_url || 'https://placehold.co/100x100/000000/FFFFFF?text=Pokemon')
            .setImage(bossPokedexData.official_artwork_url || 'https://placehold.co/200x200/FF0000/FFFFFF?text=Boss')
            .setFooter({ text: `Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}` })
            .setTimestamp();
        
        if (battleResult.events && battleResult.events.length > 0) {
            let battleLogText = formatBattleEvents(battleResult.events).join('\n');
            if (battleLogText.length > 1009) { 
                battleLogText = battleLogText.substring(0, 1009) + '...';
            }
            resultEmbed.addFields({ name: 'Di·ªÖn bi·∫øn tr·∫≠n ƒë·∫•u', value: `\`\`\`diff\n${battleLogText}\n\`\`\``, inline: false });
        }

        await message.channel.send({ embeds: [resultEmbed] });

    } catch (error) {
        console.error(`[BOSS_COMMAND_ERROR] L·ªói khi x·ª≠ l√Ω l·ªánh boss cho ng∆∞·ªùi d√πng ${userId}:`, error);
        return message.channel.send({
            content: `<@${userId}> ƒê√£ x·∫£y ra l·ªói khi tham gia ph√≥ b·∫£n boss: **${error.message}**`,
            flags: MessageFlags.Ephemeral 
        });
    }
}

module.exports = {
    handleBossDungeon,
};
