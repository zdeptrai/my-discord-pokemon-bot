// commands/profile.js
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, MessageFlags } = require('discord.js');
// Import db t·ª´ ../db.js ƒë·ªÉ d√πng chung instance DB
const { db } = require('../db'); 
const { sendOwnerDM } = require('../utils/errors/errorReporter'); // Import sendOwnerDM

const CURRENCY_NAME = 'PokeCoin'; // ƒê∆°n v·ªã ti·ªÅn t·ªá c·ªßa b·∫°n
const ITEMS_PER_PAGE = 10; // S·ªë v·∫≠t ph·∫©m hi·ªÉn th·ªã tr√™n m·ªói trang h·ªì s∆°
const MESSAGE_LIFETIME = 2 * 60 * 1000; // Tin nh·∫Øn t·ªìn t·∫°i trong 2 ph√∫t (t√≠nh b·∫±ng miliseconds)

// H√†m t·∫°o Embed cho trang h·ªì s∆° c·ª• th·ªÉ
async function createProfileEmbed(page, totalPages, items, pokecoins, authorId, authorUsername, authorAvatarURL, clientAvatarURL) {
    const profileEmbed = new EmbedBuilder()
        .setColor('#FFD700') // M√†u v√†ng gold cho h·ªì s∆°
        .setTitle(`üë§ H·ªì S∆° c·ªßa ${authorUsername}`)
        .setThumbnail(authorAvatarURL)
        .addFields(
            { name: `üí∞ ${CURRENCY_NAME}`, value: `${pokecoins}`, inline: true }
        )
        .setTimestamp()
        .setFooter({ text: `Trang ${page}/${totalPages} | ID: ${authorId}`, iconURL: clientAvatarURL }); // Th√™m s·ªë trang v√†o footer

    // Th√™m danh s√°ch v·∫≠t ph·∫©m
    if (items.length > 0) {
        let itemsList = items.map(item => {
            return `**${item.name}** x${item.quantity} (ID: ${item.item_id})`;
        }).join('\n');

        if (itemsList.length > 1000) {
            itemsList = itemsList.substring(0, 997) + '...';
        }

        profileEmbed.addFields(
            { name: 'üéí V·∫≠t Ph·∫©m S·ªü H·ªØu', value: itemsList, inline: false }
        );
    } else {
        profileEmbed.addFields(
            { name: 'üéí V·∫≠t Ph·∫©m S·ªü H·ªØu', value: 'B·∫°n ch∆∞a s·ªü h·ªØu v·∫≠t ph·∫©m n√†o.', inline: false }
        );
    }

    return profileEmbed;
}

// H√†m t·∫°o h√†ng n√∫t ƒëi·ªÅu khi·ªÉn
function createProfileButtons(currentPage, totalPages) {
    const row = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('profile_previous_page')
                .setLabel('Trang tr∆∞·ªõc')
                .setStyle(ButtonStyle.Primary)
                .setDisabled(currentPage === 1), // V√¥ hi·ªáu h√≥a n·∫øu l√† trang ƒë·∫ßu ti√™n
            new ButtonBuilder()
                .setCustomId('profile_next_page')
                .setLabel('Trang sau')
                .setStyle(ButtonStyle.Primary)
                .setDisabled(currentPage === totalPages) // V√¥ hi·ªáu h√≥a n·∫øu l√† trang cu·ªëi c√πng
        );
    return row;
}

module.exports = {
    name: 'profile',
    description: 'Hi·ªÉn th·ªã h·ªì s∆° c·ªßa b·∫°n, bao g·ªìm s·ªë Pok√©Coin v√† c√°c v·∫≠t ph·∫©m s·ªü h·ªØu.',
    aliases: ['me', 'inventory', 'inv'],
    usage: '',
    cooldown: 5,

    async execute(message, args, client, db) { 
        const userId = message.author.id;

        try {
            // 1. L·∫•y th√¥ng tin ng∆∞·ªùi d√πng v√† s·ªë Pok√©Coin
            const userProfile = await db('users') 
                .where('discord_id', userId)
                .select('pokecoins')
                .first();

            if (!userProfile) {
                try {
                    return await message.channel.send({
                        content: `<@${userId}> B·∫°n ch∆∞a c√≥ h·ªì s∆°. Vui l√≤ng s·ª≠ d·ª•ng l·ªánh \`!start\` (ho·∫∑c l·ªánh kh·ªüi t·∫°o t∆∞∆°ng t·ª±) ƒë·ªÉ t·∫°o h·ªì s∆° v√† b·∫Øt ƒë·∫ßu.`,
                        flags: MessageFlags.Ephemeral
                    });
                } catch (e) {
                    console.error(`[PROFILE_COMMAND_ERROR] L·ªói g·ª≠i tin nh·∫Øn ch∆∞a ƒëƒÉng k√Ω cho ${userId}:`, e);
                    sendOwnerDM(client, `[L·ªói Profile] L·ªói g·ª≠i tin nh·∫Øn ch∆∞a ƒëƒÉng k√Ω cho ${userId}.`, e);
                }
                return;
            }

            const pokecoins = userProfile.pokecoins || 0;

            // 2. L·∫•y t·ªïng s·ªë v·∫≠t ph·∫©m ng∆∞·ªùi d√πng s·ªü h·ªØu ƒë·ªÉ t√≠nh to√°n s·ªë trang
            const totalItemsResult = await db('user_inventory_items') 
                .where('user_discord_id', userId)
                .andWhere('quantity', '>', 0)
                .count('id as count')
                .first();
            const totalItems = parseInt(totalItemsResult.count);
            const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE) || 1; 

            let currentPage = 1;

            // 3. L·∫•y v·∫≠t ph·∫©m cho trang ƒë·∫ßu ti√™n
            const initialItems = await db('user_inventory_items') 
                .join('items', 'user_inventory_items.item_id', '=', 'items.item_id')
                .where('user_discord_id', userId)
                .andWhere('user_inventory_items.quantity', '>', 0)
                .select(
                    'items.item_id', 
                    'items.name',
                    'user_inventory_items.quantity'
                )
                .limit(ITEMS_PER_PAGE)
                .offset(0)
                .orderBy('items.name', 'asc');

            const initialEmbed = await createProfileEmbed(
                currentPage,
                totalPages,
                initialItems,
                pokecoins,
                message.author.id,
                message.author.username,
                message.author.displayAvatarURL({ dynamic: true }),
                client.user.displayAvatarURL()
            );
            const initialButtons = createProfileButtons(currentPage, totalPages);

            let profileMessage;
            try {
                // G·ª≠i tin nh·∫Øn ban ƒë·∫ßu b·∫±ng channel.send v√† fetchReply
                profileMessage = await message.channel.send({
                    embeds: [initialEmbed],
                    components: [initialButtons],
                    fetchReply: true
                });
            } catch (e) {
                console.error("[PROFILE_COMMAND_ERROR] L·ªói khi g·ª≠i tin nh·∫Øn h·ªì s∆°:", e);
                sendOwnerDM(client, `[L·ªói Profile] L·ªói khi g·ª≠i tin nh·∫Øn h·ªì s∆° cho ${userId}.`, e);
                return; // Tho√°t n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c tin nh·∫Øn
            }

            // T·∫°o b·ªô thu th·∫≠p t∆∞∆°ng t√°c cho c√°c n√∫t
            const collector = profileMessage.createMessageComponentCollector({
                filter: i => i.user.id === message.author.id && (i.customId === 'profile_previous_page' || i.customId === 'profile_next_page'), // Ch·ªâ l·ªçc c√°c customId c·ªßa ph√¢n trang
                time: MESSAGE_LIFETIME, 
                idle: MESSAGE_LIFETIME 
            });

            collector.on('collect', async i => {
                // ƒê√É B·ªé: await i.deferUpdate(); // handlers/interactionCreate.js s·∫Ω b·ªè qua defer, i.update() s·∫Ω t·ª± defer/acknowledge

                let newPage = currentPage; 
                if (i.customId === 'profile_previous_page') {
                    newPage--;
                } else if (i.customId === 'profile_next_page') {
                    newPage++;
                }

                if (newPage < 1) newPage = 1;
                if (newPage > totalPages) newPage = totalPages;

                if (newPage === currentPage) { // N·∫øu trang kh√¥ng ƒë·ªïi, ch·ªâ c·∫ßn acknowledge t∆∞∆°ng t√°c
                    try {
                        await i.update({}); // G·ª≠i m·ªôt update r·ªóng ƒë·ªÉ acknowledge t∆∞∆°ng t√°c
                    } catch (updateError) {
                        if (updateError.code === 10062 || updateError.code === 40060) {
                            console.warn(`[PROFILE_COLLECTOR_WARN] T∆∞∆°ng t√°c ƒë√£ h·∫øt h·∫°n ho·∫∑c ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω: ${updateError.code}`);
                        } else {
                            console.error(`[PROFILE_COLLECTOR_ERROR] L·ªói khi c·∫≠p nh·∫≠t t∆∞∆°ng t√°c r·ªóng cho ${userId}:`, updateError);
                            sendOwnerDM(client, `[L·ªói Profile Collector] L·ªói khi c·∫≠p nh·∫≠t t∆∞∆°ng t√°c r·ªóng cho ${userId}.`, updateError);
                        }
                    }
                    return;
                }

                currentPage = newPage; 

                const newOffset = (currentPage - 1) * ITEMS_PER_PAGE;
                const newItems = await db('user_inventory_items') 
                    .join('items', 'user_inventory_items.item_id', '=', 'items.item_id')
                    .where('user_discord_id', userId)
                    .andWhere('user_inventory_items.quantity', '>', 0)
                    .select(
                        'items.item_id',
                        'items.name',
                        'user_inventory_items.quantity'
                    )
                    .limit(ITEMS_PER_PAGE)
                    .offset(newOffset)
                    .orderBy('items.name', 'asc');

                const newEmbed = await createProfileEmbed(
                    currentPage,
                    totalPages,
                    newItems,
                    pokecoins,
                    message.author.id,
                    message.author.username,
                    message.author.displayAvatarURL({ dynamic: true }),
                    client.user.displayAvatarURL()
                );
                const newButtons = createProfileButtons(currentPage, totalPages);

                try {
                    // C·∫≠p nh·∫≠t tin nh·∫Øn v·ªõi Embed v√† n√∫t m·ªõi
                    await i.update({
                        embeds: [newEmbed],
                        components: [newButtons]
                    });
                } catch (updateError) {
                    if (updateError.code === 10062 || updateError.code === 40060) {
                        console.warn(`[PROFILE_COLLECTOR_WARN] T∆∞∆°ng t√°c ƒë√£ h·∫øt h·∫°n ho·∫∑c ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω: ${updateError.code}`);
                    } else {
                        console.error(`[PROFILE_COLLECTOR_ERROR] L·ªói khi c·∫≠p nh·∫≠t tin nh·∫Øn profile trong collector cho ${userId}:`, updateError);
                        sendOwnerDM(client, `[L·ªói Profile Collector] L·ªói khi c·∫≠p nh·∫≠t tin nh·∫Øn ph√¢n trang cho ${userId}.`, updateError);
                    }
                }
            });

            collector.on('end', async collected => {
                // Khi collector k·∫øt th√∫c (h·∫øt th·ªùi gian), v√¥ hi·ªáu h√≥a c√°c n√∫t
                try {
                    // Ki·ªÉm tra xem tin nh·∫Øn c√≥ c√≤n t·ªìn t·∫°i v√† c√≥ th·ªÉ ch·ªânh s·ª≠a kh√¥ng
                    const fetchedMessage = await message.channel.messages.fetch(profileMessage.id).catch(() => null);
                    if (fetchedMessage && fetchedMessage.editable) {
                        const disabledComponents = fetchedMessage.components.map(row => { 
                            return ActionRowBuilder.from(row).setComponents(
                                row.components.map(component => ButtonBuilder.from(component).setDisabled(true))
                            );
                        });
                        await fetchedMessage.edit({ components: disabledComponents });
                        console.log(`[PROFILE] C√°c n√∫t tr√™n tin nh·∫Øn h·ªì s∆° c·ªßa ${message.author.username} ƒë√£ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a sau ${MESSAGE_LIFETIME / 1000} gi√¢y.`);
                    }
                } catch (editError) {
                    // B·∫Øt l·ªói Unknown Message (10008) n·∫øu tin nh·∫Øn ƒë√£ b·ªã x√≥a
                    if (editError.code === 10008) {
                        console.warn(`[PROFILE_COLLECTOR_WARN] Tin nh·∫Øn h·ªì s∆° ƒë√£ b·ªã x√≥a, kh√¥ng th·ªÉ v√¥ hi·ªáu h√≥a n√∫t.`);
                    } else {
                        console.error('Kh√¥ng th·ªÉ v√¥ hi·ªáu h√≥a n√∫t tr√™n tin nh·∫Øn h·ªì s∆°:', editError);
                        sendOwnerDM(client, `[L·ªói Profile Collector End] L·ªói khi v√¥ hi·ªáu h√≥a n√∫t cho ${userId}.`, editError);
                    }
                }
            });

        } catch (error) {
            console.error('[PROFILE_COMMAND_ERROR] L·ªói khi hi·ªÉn th·ªã h·ªì s∆° ng∆∞·ªùi d√πng:', error);
            sendOwnerDM(client, `[L·ªói Profile Command] L·ªói khi ng∆∞·ªùi d√πng ${userId} s·ª≠ d·ª•ng l·ªánh profile.`, error);
            await message.channel.send({
                content: `<@${userId}> ƒê√£ x·∫£y ra l·ªói khi c·ªë g·∫Øng hi·ªÉn th·ªã h·ªì s∆° c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.`,
                flags: MessageFlags.Ephemeral
            }).catch(err => console.error("L·ªói khi g·ª≠i tin nh·∫Øn l·ªói ephemeral:", err));
        }
    },
};
