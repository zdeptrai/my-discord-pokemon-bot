// commands/startev.js
const { EmbedBuilder, MessageFlags } = require('discord.js');
const eventManager = require('../events/eventManager'); // Import eventManager

module.exports = {
    name: 'startev',
    description: 'K√≠ch ho·∫°t m·ªôt s·ª± ki·ªán tung x√∫c x·∫Øc trong 15 ph√∫t. Ng∆∞·ªùi ch∆°i n√†o roll ƒë∆∞·ª£c 3 s·ªë gi·ªëng nhau s·∫Ω th·∫Øng!',
    aliases: ['startevent', 'se'],
    usage: '',
    cooldown: 5, // Cooldown d√†i h∆°n ƒë·ªÉ tr√°nh spam s·ª± ki·ªán

    async execute(message, args, client, db) {
        const userId = message.author.id;
        const channelId = message.channel.id;

        // TH√äM: Ki·ªÉm tra quy·ªÅn ch·ªâ cho ph√©p ch·ªß bot s·ª≠ d·ª•ng l·ªánh n√†y
        if (client.config.OWNER_DISCORD_ID && userId !== client.config.OWNER_DISCORD_ID) {
            // ƒê√É S·ª¨A: D√πng message.channel.send() thay v√¨ message.reply() ƒë·ªÉ tr√°nh l·ªói Unknown Message
            return message.channel.send({ 
                content: `<@${userId}> B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª± ki·ªán n√†y. Ch·ªâ ch·ªß bot m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh \`!startev\`.`, 
                flags: MessageFlags.Ephemeral 
            }).catch(e => console.error("Could not send startev permission message:", e));
        }

        try {
            const eventInfo = eventManager.startEvent(channelId);

            const endTime = new Date(eventInfo.endTime).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });

            const eventEmbed = new EmbedBuilder()
                .setColor('#FFD700') // M√†u v√†ng cho s·ª± ki·ªán
                .setTitle('üéâ S·ª∞ KI·ªÜN TUNG X√öC X·∫ÆC ƒê√É B·∫ÆT ƒê·∫¶U! üéâ')
                .setDescription(`H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n roll ƒë∆∞·ª£c 3 s·ªë gi·ªëng nhau ƒë·ªÉ gi√†nh chi·∫øn th·∫Øng!`)
                .addFields(
                    { name: 'K√™nh s·ª± ki·ªán', value: `<#${channelId}>`, inline: true },
                    { name: 'Th·ªùi gian k·∫øt th√∫c', value: `${eventManager.EVENT_DURATION_MINUTES} ph√∫t (K·∫øt th√∫c l√∫c: ${endTime})`, inline: true },
                    { name: 'C√°ch tham gia', value: `S·ª≠ d·ª•ng l·ªánh \`${client.config.PREFIX}roll\` trong k√™nh n√†y.`, inline: false },
                    { name: 'ƒêi·ªÅu ki·ªán th·∫Øng', value: 'Roll ƒë∆∞·ª£c 3 x√∫c x·∫Øc c√≥ s·ªë gi·ªëng nhau (`6-6-6`)', inline: false },
                    { name: 'K·∫øt qu·∫£ Roll g·∫ßn nh·∫•t', value: 'Ch∆∞a c√≥ ai roll.', inline: false } // S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi l·ªánh !roll
                )
                .setFooter({ text: `S·ª± ki·ªán ƒë∆∞·ª£c kh·ªüi t·∫°o b·ªüi ${message.author.username}` })
                .setTimestamp();

            const eventMessage = await message.channel.send({ embeds: [eventEmbed] });
            eventManager.setEventMessageId(eventMessage.id); // L∆∞u ID tin nh·∫Øn ƒë·ªÉ c·∫≠p nh·∫≠t sau

            // C·∫≠p nh·∫≠t th·ªùi gian c√≤n l·∫°i m·ªói ph√∫t
            const updateInterval = setInterval(async () => {
                const currentEventState = eventManager.getEventState();
                if (!currentEventState.active || currentEventState.channelId !== channelId) {
                    clearInterval(updateInterval); // D·ª´ng c·∫≠p nh·∫≠t n·∫øu s·ª± ki·ªán ƒë√£ k·∫øt th√∫c ho·∫∑c chuy·ªÉn k√™nh
                    return;
                }

                const remainingTimeMs = currentEventState.endTime - Date.now();
                if (remainingTimeMs <= 0) {
                    clearInterval(updateInterval);
                    return;
                }

                const remainingMinutes = Math.ceil(remainingTimeMs / (1000 * 60));
                
                // C·∫≠p nh·∫≠t m√¥ t·∫£ ƒë·ªÉ hi·ªÉn th·ªã th·ªùi gian c√≤n l·∫°i
                const updatedEmbed = EmbedBuilder.from(eventEmbed) // T·∫°o b·∫£n sao c·ªßa embed g·ªëc
                    .setDescription(`H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n roll ƒë∆∞·ª£c 3 s·ªë gi·ªëng nhau ƒë·ªÉ gi√†nh chi·∫øn th·∫Øng!\nTh·ªùi gian c√≤n l·∫°i: **${remainingMinutes} ph√∫t**`);
                
                // C·∫≠p nh·∫≠t tr∆∞·ªùng "K·∫øt qu·∫£ Roll g·∫ßn nh·∫•t"
                if (currentEventState.lastRoll) {
                    const rollerUser = await client.users.fetch(currentEventState.lastRollerId).catch(() => null);
                    const rollerName = rollerUser ? rollerUser.username : 'Ng∆∞·ªùi ch∆°i kh√¥ng x√°c ƒë·ªãnh';
                    updatedEmbed.spliceFields(4, 1, { // spliceFields(index, deleteCount, newField)
                        name: 'K·∫øt qu·∫£ Roll g·∫ßn nh·∫•t', 
                        value: `**${rollerName}** ƒë√£ roll: \`${currentEventState.lastRoll.join('-')}\``, 
                        inline: false 
                    });
                } else {
                     updatedEmbed.spliceFields(4, 1, { 
                        name: 'K·∫øt qu·∫£ Roll g·∫ßn nh·∫•t', 
                        value: 'Ch∆∞a c√≥ ai roll.', 
                        inline: false 
                    });
                }

                try {
                    await eventMessage.edit({ embeds: [updatedEmbed] });
                } catch (editError) {
                    console.error(`[STARTEV_ERROR] L·ªói khi c·∫≠p nh·∫≠t tin nh·∫Øn s·ª± ki·ªán:`, editError);
                    clearInterval(updateInterval); // D·ª´ng c·∫≠p nh·∫≠t n·∫øu kh√¥ng th·ªÉ ch·ªânh s·ª≠a tin nh·∫Øn
                }
            }, 60 * 1000); // C·∫≠p nh·∫≠t m·ªói ph√∫t

        } catch (error) {
            console.error(`[STARTEV_COMMAND_ERROR] L·ªói khi b·∫Øt ƒë·∫ßu s·ª± ki·ªán:`, error);
            await message.channel.send({
                content: `<@${userId}> ƒê√£ c√≥ l·ªói x·∫£y ra khi b·∫Øt ƒë·∫ßu s·ª± ki·ªán: ${error.message}`,
                flags: MessageFlags.Ephemeral
            }).catch(e => console.error("Could not send startev error message:", e));
        }
    },
};
