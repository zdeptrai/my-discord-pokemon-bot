// commands/withdraw.js
const { EmbedBuilder, MessageFlags } = require('discord.js');
const { db } = require('../db');
const { isChannelAllowed } = require('../utils/core/channelUtils'); // Import h√†m ki·ªÉm tra k√™nh

const MARKETPLACE_FEE_PERCENTAGE = 0.10;

module.exports = {
    name: 'withdraw',
    description: 'R√∫t l·∫°i Pok√©mon ho·∫∑c v·∫≠t ph·∫©m b·∫°n ƒë√£ ƒëƒÉng b√°n tr√™n th·ªã tr∆∞·ªùng.',
    aliases: ['wd', 'cancelmk'],
    usage: '<listing_id>',
    cooldown: 10,

    async execute(message, args, client) {
        const userId = message.author.id;
        const prefix = client.config.PREFIX;
        const guildId = message.guild.id;
        const channelId = message.channel.id;

        // KI·ªÇM TRA K√äNH ƒê∆Ø·ª¢C PH√âP
        const allowed = await isChannelAllowed(guildId, channelId, 'market');
        if (!allowed) {
            await message.channel.send({
                content: `<@${userId}> L·ªánh \`withdraw\` ch·ªâ c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong c√°c k√™nh th·ªã tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p b·ªüi qu·∫£n tr·ªã vi√™n.`,
                flags: MessageFlags.Ephemeral
            });
            return;
        }

        if (args.length < 1) {
            await message.channel.send({
                content: `<@${userId}> Vui l√≤ng cung c·∫•p ID c·ªßa l∆∞·ª£t ƒëƒÉng b√°n b·∫°n mu·ªën r√∫t l·∫°i. C√°ch d√πng: \`${prefix}withdraw <listing_id>\``,
                flags: MessageFlags.Ephemeral
            });
            return;
        }

        const listingId = parseInt(args[0]);

        if (isNaN(listingId) || listingId <= 0) {
            await message.channel.send({
                content: `<@${userId}> ID l∆∞·ª£t ƒëƒÉng b√°n kh√¥ng h·ª£p l·ªá. Vui l√≤ng cung c·∫•p m·ªôt s·ªë nguy√™n d∆∞∆°ng.`,
                flags: MessageFlags.Ephemeral
            });
            return;
        }

        try {
            const listing = await db('marketplace_listings')
                .where({ listing_id: listingId })
                .first();

            if (!listing) {
                await message.channel.send({
                    content: `<@${userId}> Kh√¥ng t√¨m th·∫•y l∆∞·ª£t ƒëƒÉng b√°n n√†o v·ªõi ID \`${listingId}\`.`,
                    flags: MessageFlags.Ephemeral
                });
                return;
            }

            if (listing.seller_discord_id !== userId) {
                await message.channel.send({
                    content: `<@${userId}> B·∫°n kh√¥ng ph·∫£i l√† ng∆∞·ªùi b√°n c·ªßa l∆∞·ª£t ƒëƒÉng b√°n n√†y.`,
                    flags: MessageFlags.Ephemeral
                });
                return;
            }

            if (listing.status !== 'active') {
                await message.channel.send({
                    content: `<@${userId}> L∆∞·ª£t ƒëƒÉng b√°n ID \`${listingId}\` hi·ªán kh√¥ng ·ªü tr·∫°ng th√°i "active" (c√≥ th·ªÉ ƒë√£ b√°n ho·∫∑c ƒë√£ r√∫t).`,
                    flags: MessageFlags.Ephemeral
                });
                return;
            }

            const sellerUser = await db('users').where({ discord_id: userId }).first();
            if (!sellerUser) {
                await message.channel.send({
                    content: `<@${userId}> Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.`,
                    flags: MessageFlags.Ephemeral
                });
                return;
            }

            const feeAmount = Math.ceil(listing.price * MARKETPLACE_FEE_PERCENTAGE);

            if (sellerUser.pokecoins < feeAmount) {
                await message.channel.send({
                    content: `<@${userId}> B·∫°n kh√¥ng ƒë·ªß Pokecoin ƒë·ªÉ r√∫t l·∫°i v·∫≠t ph·∫©m n√†y. B·∫°n c·∫ßn ${feeAmount} Pokecoin (ph√≠ 10% gi√° tr·ªã listing). B·∫°n hi·ªán c√≥ ${sellerUser.pokecoins} Pokecoin.`,
                    flags: MessageFlags.Ephemeral
                });
                return;
            }

            await db.transaction(async trx => {
                await trx('users')
                    .where({ discord_id: userId })
                    .decrement('pokecoins', feeAmount);

                let itemDisplayName = '';
                let embedColor = 0xFF0000;

                if (listing.item_type === 'pokemon') {
                    await trx('user_pokemons')
                        .where({ id: listing.item_reference_id })
                        .update({
                            is_on_marketplace: false,
                            marketplace_listing_id: null,
                            user_discord_id: userId,
                            updated_at: new Date()
                        });

                    const userPokemon = await db('user_pokemons').where({ id: listing.item_reference_id }).first();
                    const pokemonData = await db('pokemons').where({ pokedex_id: userPokemon.pokedex_id }).first();
                    itemDisplayName = `${userPokemon.nickname ? userPokemon.nickname + ' (' + pokemonData.name + ')' : pokemonData.name} (Lv.${userPokemon.level})`;
                } else if (listing.item_type === 'item') {
                    const existingItem = await trx('user_inventory_items')
                        .where({ user_discord_id: userId, item_id: listing.item_reference_id })
                        .first();

                    if (existingItem) {
                        await trx('user_inventory_items')
                            .where({ user_discord_id: userId, item_id: listing.item_reference_id })
                            .increment('quantity', listing.quantity);
                    } else {
                        await trx('user_inventory_items').insert({
                            user_discord_id: userId,
                            item_id: listing.item_reference_id,
                            quantity: listing.quantity,
                            created_at: new Date(),
                            updated_at: new Date()
                        });
                    }

                    const itemDetails = await db('items').where({ item_id: listing.item_reference_id }).first();
                    itemDisplayName = `${itemDetails.name} (x${listing.quantity})`;
                }

                await trx('marketplace_listings')
                    .where({ listing_id: listingId })
                    .update({
                        status: 'cancelled',
                        updated_at: new Date()
                    });

                const embed = new EmbedBuilder()
                    .setColor(embedColor)
                    .setTitle('üóëÔ∏è R√∫t l·∫°i v·∫≠t ph·∫©m th√†nh c√¥ng!')
                    .setDescription(`B·∫°n ƒë√£ r√∫t l·∫°i **${itemDisplayName}** (M√£ listing: \`${listingId}\`) t·ª´ th·ªã tr∆∞·ªùng.`)
                    .addFields(
                        { name: 'V·∫≠t ph·∫©m ƒë√£ r√∫t', value: itemDisplayName, inline: true },
                        { name: 'Ph√≠ r√∫t l·∫°i', value: `${feeAmount} Pokecoin`, inline: true },
                        { name: 'S·ªë Pokecoin hi·ªán t·∫°i', value: `${sellerUser.pokecoins - feeAmount} Pokecoin`, inline: false }
                    )
                    .setTimestamp();

                await message.channel.send({ embeds: [embed] });
            });

        } catch (error) {
            console.error('[WITHDRAW_COMMAND_ERROR] L·ªói khi r√∫t l·∫°i v·∫≠t ph·∫©m:', error);
            await message.channel.send({
                content: `<@${userId}> ƒê√£ c√≥ l·ªói x·∫£y ra khi r√∫t l·∫°i v·∫≠t ph·∫©m c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.`,
                flags: MessageFlags.Ephemeral
            });
        }
    },
};