// commands/sellpokemon.js
const { EmbedBuilder, MessageFlags } = require('discord.js');
const { db } = require('../db');
const { isChannelAllowed } = require('../utils/core/channelUtils'); // Import h√†m ki·ªÉm tra k√™nh

const MARKETPLACE_FEE_PERCENTAGE = 0.10;

module.exports = {
    name: 'sellpokemon',
    description: 'ƒêƒÉng b√°n m·ªôt Pok√©mon c·ªßa b·∫°n l√™n th·ªã tr∆∞·ªùng.',
    aliases: ['sp'],
    usage: '<pokemon_id> <price> [description]',
    cooldown: 10,

    async execute(message, args, client) {
        const userId = message.author.id;
        const prefix = client.config.PREFIX;
        const guildId = message.guild.id;
        const channelId = message.channel.id;

        // KI·ªÇM TRA K√äNH ƒê∆Ø·ª¢C PH√âP
        const allowed = await isChannelAllowed(guildId, channelId, 'market');
        if (!allowed) {
            await message.channel.send({
                content: `<@${userId}> L·ªánh \`sellpokemon\` ch·ªâ c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong c√°c k√™nh th·ªã tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p b·ªüi qu·∫£n tr·ªã vi√™n.`,
                flags: MessageFlags.Ephemeral
            });
            return;
        }

        if (args.length < 2) {
            await message.channel.send({
                content: `<@${userId}> Vui l√≤ng cung c·∫•p ID Pok√©mon v√† gi√° b√°n. C√°ch d√πng: \`${prefix}sellpokemon <pokemon_id> <price> [description]\``,
                flags: MessageFlags.Ephemeral
            });
            return;
        }

        const pokemonIdToSell = parseInt(args[0]);
        const price = parseInt(args[1]);
        const description = args.slice(2).join(' ');

        if (isNaN(pokemonIdToSell) || pokemonIdToSell <= 0) {
            await message.channel.send({
                content: `<@${userId}> ID Pok√©mon kh√¥ng h·ª£p l·ªá. Vui l√≤ng cung c·∫•p m·ªôt s·ªë nguy√™n d∆∞∆°ng.`,
                flags: MessageFlags.Ephemeral
            });
            return;
        }

        if (isNaN(price) || price <= 0) {
            await message.channel.send({
                content: `<@${userId}> Gi√° b√°n kh√¥ng h·ª£p l·ªá. Vui l√≤ng cung c·∫•p m·ªôt s·ªë nguy√™n d∆∞∆°ng l·ªõn h∆°n 0.`,
                flags: MessageFlags.Ephemeral
            });
            return;
        }

        try {
            const userPokemon = await db('user_pokemons')
                .where({ id: pokemonIdToSell, user_discord_id: userId })
                .first();

            if (!userPokemon) {
                await message.channel.send({
                    content: `<@${userId}> B·∫°n kh√¥ng s·ªü h·ªØu Pok√©mon v·ªõi ID n√†y, ho·∫∑c ID kh√¥ng t·ªìn t·∫°i.`,
                    flags: MessageFlags.Ephemeral
                });
                return;
            }

            if (userPokemon.is_on_marketplace) {
                await message.channel.send({
                    content: `<@${userId}> Pok√©mon **${userPokemon.nickname || userPokemon.pokemon_name} (ID: ${userPokemon.id})** ƒë√£ ƒë∆∞·ª£c ƒëƒÉng b√°n tr√™n th·ªã tr∆∞·ªùng r·ªìi!`,
                    flags: MessageFlags.Ephemeral
                });
                return;
            }

            if (userPokemon.training_start_time) {
                await message.channel.send({
                    content: `<@${userId}> Pok√©mon **${userPokemon.nickname || userPokemon.pokemon_name} (ID: ${userPokemon.id})** hi·ªán ƒëang ƒë∆∞·ª£c hu·∫•n luy·ªán v√† kh√¥ng th·ªÉ b√°n. Vui l√≤ng nh·∫≠n l·∫°i b·∫±ng \`${prefix}collecttrain\` tr∆∞·ªõc.`,
                    flags: MessageFlags.Ephemeral
                });
                return;
            }

            const [listing] = await db('marketplace_listings').insert({
                seller_discord_id: userId,
                item_type: 'pokemon',
                item_reference_id: pokemonIdToSell,
                quantity: 1,
                price: price,
                description: description || null,
                status: 'active',
                listed_at: new Date(),
                listing_expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000),
            }).returning('*');

            await db('user_pokemons')
                .where({ id: pokemonIdToSell })
                .update({
                    is_on_marketplace: true,
                    marketplace_listing_id: listing.listing_id,
                    updated_at: new Date()
                });

            const pokemonData = await db('pokemons').where({ pokedex_id: userPokemon.pokedex_id }).first();

            const embed = new EmbedBuilder()
                .setColor(0x00FF00)
                .setTitle('üéâ ƒêƒÉng b√°n Pok√©mon th√†nh c√¥ng!')
                .setDescription(`Pok√©mon **${userPokemon.nickname || pokemonData.name} (ID: ${userPokemon.id})** ƒë√£ ƒë∆∞·ª£c ƒëƒÉng b√°n tr√™n th·ªã tr∆∞·ªùng v·ªõi gi√° **${price} Pokecoin**.\n` +
                                `M√£ ƒëƒÉng b√°n c·ªßa b·∫°n l√†: \`${listing.listing_id}\``)
                .addFields(
                    { name: 'Pok√©mon', value: `${userPokemon.nickname || pokemonData.name} (Lv.${userPokemon.level})`, inline: true },
                    { name: 'Gi√°', value: `${price} Pokecoin`, inline: true },
                    { name: 'M√¥ t·∫£', value: description || 'Kh√¥ng c√≥', inline: false }
                )
                .setThumbnail(pokemonData.official_artwork_url)
                .setFooter({ text: `Ph√≠ giao d·ªãch khi b√°n th√†nh c√¥ng/r√∫t l·∫°i l√† ${MARKETPLACE_FEE_PERCENTAGE * 100}% gi√° tr·ªã.` });

            await message.channel.send({ embeds: [embed] });

        } catch (error) {
            console.error('[SELL_POKEMON_COMMAND_ERROR] L·ªói khi ƒëƒÉng b√°n Pok√©mon:', error);
            await message.channel.send({
                content: `<@${userId}> ƒê√£ c√≥ l·ªói x·∫£y ra khi ƒëƒÉng b√°n Pok√©mon c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.`,
                flags: MessageFlags.Ephemeral
            });
        }
    },
};