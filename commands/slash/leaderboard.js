// commands/slash/leaderboard.js

const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { getOrCreateUserProfile, getLevelUpXP, getRoleByLevelAndPath } = require('../../utils/managers/xpManager');
const { db } = require('../../db/index'); 

module.exports = {
    data: new SlashCommandBuilder()
        .setName('bxh')
        .setDescription('Xem b·∫£ng x·∫øp h·∫°ng top 10 ng∆∞·ªùi tu luy·ªán trong server.'),
    
    async execute(interaction) {
        await interaction.deferReply();

        const guildId = interaction.guild.id;
        const userId = interaction.user.id;

        try {
            // 1. L·∫•y danh s√°ch top 10 ng∆∞·ªùi d√πng v·ªõi logic s·∫Øp x·∫øp m·ªõi: Level gi·∫£m d·∫ßn, sau ƒë√≥ XP gi·∫£m d·∫ßn
            const topUsers = await db('user_profiles')
                .select('*')
                .where({ guild_id: guildId })
                .orderBy('level', 'desc')
                .orderBy('xp', 'desc')
                .limit(10);
            
            // 2. L·∫•y h·ªì s∆° c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i ƒë·ªÉ x√°c ƒë·ªãnh th·ª© h·∫°ng
            const userProfile = await getOrCreateUserProfile(userId, guildId, db);
            
            // Logic ƒë·ªÉ x√°c ƒë·ªãnh th·ª© h·∫°ng: ƒê·∫øm nh·ªØng ng∆∞·ªùi c√≥ c·∫•p ƒë·ªô cao h∆°n HO·∫∂C c√≥ c√πng c·∫•p ƒë·ªô nh∆∞ng XP cao h∆°n
            const userRankResult = await db('user_profiles')
                .count('user_id as count')
                .where({ guild_id: guildId })
                .andWhere(builder => {
                    builder
                        .where('level', '>', userProfile.level)
                        .orWhere(subBuilder => {
                            subBuilder
                                .where('level', '=', userProfile.level)
                                .andWhere('xp', '>', userProfile.xp);
                        });
                });
            const userRank = userRankResult[0].count + 1;

            // 3. X√¢y d·ª±ng b·∫£ng x·∫øp h·∫°ng
            const leaderboardFields = [];
            const rankEmojis = ['ü•á', 'ü•à', 'ü•â'];
            
            for (let i = 0; i < topUsers.length; i++) {
                const rank = i + 1;
                const user = topUsers[i];
                const member = await interaction.guild.members.fetch(user.user_id).catch(() => null);

                // N·∫øu kh√¥ng t√¨m th·∫•y th√†nh vi√™n trong server (ƒë√£ r·ªùi ƒëi), b·ªè qua
                if (!member) continue;

                const roleConfig = getRoleByLevelAndPath(user.level, user.path_type);
                const roleName = roleConfig ? roleConfig.name : 'V√¥ Danh';

                // T√≠nh to√°n thanh ti·∫øn tr√¨nh XP
                const xpToNextLevel = getLevelUpXP(user.level);
                const xpForNextLevel = (user.xp / xpToNextLevel) * 100;
                const progress = Math.min(xpForNextLevel, 100);
                const progressBar = createProgressBar(progress);

                let rankString = '';
                if (rank <= 3) {
                    rankString = rankEmojis[rank - 1];
                } else {
                    rankString = `\`#${rank}\``;
                }

                leaderboardFields.push({
                    name: `${rankString} ${member.displayName} - C·∫£nh gi·ªõi ${roleName}`,
                    value: `> Level: ${user.level} | XP: ${user.xp}\n> ${progressBar} \`${progress.toFixed(2)}%\``,
                    inline: false,
                });
            }

            // 4. T·∫°o embed v√† th√™m c√°c tr∆∞·ªùng th√¥ng tin
            const embed = new EmbedBuilder()
                .setColor('#FFD700') // M√†u v√†ng gold t∆∞·ª£ng tr∆∞ng cho b·∫£ng x·∫øp h·∫°ng
                .setTitle('üèÜ B·∫£ng X·∫øp H·∫°ng Tu Luy·ªán üèÜ')
                .setDescription(
                    `ƒê√¢y l√† 10 ng∆∞·ªùi tu luy·ªán m·∫°nh nh·∫•t trong server! ` +
                    `\nTh·ª© h·∫°ng c·ªßa b·∫°n: **#${userRank}**`
                )
                .addFields(leaderboardFields)
                .setTimestamp()
                .setFooter({ text: 'H√£y tu luy·ªán chƒÉm ch·ªâ ƒë·ªÉ leo l√™n ƒë·ªânh!' });

            await interaction.editReply({ embeds: [embed] });

        } catch (error) {
            console.error('[LEADERBOARD_ERROR]', error);
            await interaction.editReply({
                content: 'ƒê√£ c√≥ l·ªói x·∫£y ra khi l·∫•y b·∫£ng x·∫øp h·∫°ng. Vui l√≤ng th·ª≠ l·∫°i sau!',
                ephemeral: true,
            });
        }
    },
};

/**
 * @description T·∫°o thanh ti·∫øn tr√¨nh b·∫±ng emoji.
 * @param {number} progress Ph·∫ßn trƒÉm ti·∫øn ƒë·ªô (0-100).
 * @returns {string} Thanh ti·∫øn tr√¨nh d∆∞·ªõi d·∫°ng chu·ªói emoji.
 */
function createProgressBar(progress) {
    const filledBlocks = '‚ñà';
    const emptyBlocks = '‚ñë';
    const totalBlocks = 10;
    const filledCount = Math.floor((progress / 100) * totalBlocks);
    const emptyCount = totalBlocks - filledCount;
    return `${filledBlocks.repeat(filledCount)}${emptyBlocks.repeat(emptyCount)}`;
}
