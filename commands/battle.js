// commands/battle.js
const { EmbedBuilder, MessageFlags } = require('discord.js');
const { db } = require('../db');
const { isUserRegistered, getSelectedOrFirstPokemon } = require('../utils/core/userUtils');

// Import c√°c h√†m v√† module ƒë√£ t√°ch
// const { deleteMessageWithTimeout } = require('../utils/commonUtils'); // ƒê√£ lo·∫°i b·ªè v√¨ kh√¥ng c·∫ßn n·ªØa
const { getAndInitializeWildPokemon } = require('../utils/battle/wildPokemonHandler');
const { simulateFullBattle } = require('../utils/battle/battleLogic');
const { generateBattleEmbed } = require('../utils/battle/battleUtils');
const {
    calculateExpToNextLevel,
    calculateHP,
    calculateStat,
    calculateExpGain,
    calculatePokecoinGain
} = require('../utils/battle/battleCalculations');

// Lo·∫°i b·ªè h·∫±ng s·ªë MESSAGE_DELETE_TIMEOUT v√¨ kh√¥ng c√≤n s·ª≠ d·ª•ng deleteMessageWithTimeout cho c√°c ph·∫£n h·ªìi ephemeral
// const MESSAGE_DELETE_TIMEOUT = 5000;

module.exports = {
    name: 'battle',
    description: 'Chi·∫øn ƒë·∫•u v·ªõi Pok√©mon hoang d√£ ƒë·ªÉ ki·∫øm kinh nghi·ªám v√† Pokecoin!',
    aliases: ['b', 'fight'],
    cooldown: 6,

    async execute(message, args, client) {
        const userId = message.author.id;
        const channelId = message.channel.id;
        const guildId = message.guild.id;
        const prefix = client.config.PREFIX;

        let userPokemon; 

        try {
            // --- KI·ªÇM TRA K√äNH CHI·∫æN ƒê·∫§U ---
            const guildSettings = await db('guild_settings').where({ guild_id: guildId }).first();
            let battleChannelIds = [];

            if (guildSettings && guildSettings.battle_channel_ids) {
                try {
                    battleChannelIds = JSON.parse(guildSettings.battle_channel_ids);
                    if (!Array.isArray(battleChannelIds)) {
                        console.warn(`[BATTLE_COMMAND_WARN] battle_channel_ids cho guild ${guildId} kh√¥ng ph·∫£i l√† m·ªôt m·∫£ng sau khi parse. ƒê·∫∑t l·∫°i th√†nh m·∫£ng r·ªóng.`);
                        battleChannelIds = [];
                    }
                } catch (e) {
                    console.error(`[BATTLE_COMMAND_ERROR] L·ªói khi parse battle_channel_ids cho guild ${guildId}:`, e);
                    battleChannelIds = [];
                }
            }

            if (battleChannelIds.length === 0 || !battleChannelIds.includes(channelId)) {
                // S·ª¨A: D√πng ephemeral message thay v√¨ reply v√† delete
                await message.channel.send({
                    content: `L·ªánh \`${prefix}battle\` kh√¥ng ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng ·ªü k√™nh n√†y. B·∫°n ch·ªâ c√≥ th·ªÉ d√πng l·ªánh n√†y` +
                             `${battleChannelIds.length > 0 ? ` t·∫°i c√°c k√™nh sau: ${battleChannelIds.map(id => `<#${id}>`).join(', ')}.` : ' t·∫°i b·∫•t k·ª≥ k√™nh n√†o. Vui l√≤ng y√™u c·∫ßu Admin s·ª≠ d·ª•ng l·ªánh `!setbattlechannel add` t·∫°i k√™nh b·∫°n mu·ªën cho ph√©p chi·∫øn ƒë·∫•u.'}`,
                    flags: MessageFlags.Ephemeral
                }).catch(e => console.error("Could not send battle channel restriction message:", e));
                return;
            }

            // --- KI·ªÇM TRA ƒêƒÇNG K√ù NG∆Ø·ªúI D√ôNG ---
            const registered = await isUserRegistered(userId);
            if (!registered) {
                // S·ª¨A: D√πng ephemeral message thay v√¨ reply v√† delete
                await message.channel.send({
                    content: `B·∫°n ch∆∞a b·∫Øt ƒë·∫ßu cu·ªôc phi√™u l∆∞u c·ªßa m√¨nh! Vui l√≤ng s·ª≠ d·ª•ng l·ªánh \`${prefix}start\` ƒë·ªÉ ƒëƒÉng k√Ω v√† b·∫Øt ƒë·∫ßu.`,
                    flags: MessageFlags.Ephemeral
                }).catch(e => console.error("Could not send unregistered user message:", e));
                return;
            }

            // --- L·∫§Y POKEMON C·ª¶A NG∆Ø·ªúI D√ôNG ---
            userPokemon = await getSelectedOrFirstPokemon(userId); 

            if (!userPokemon) {
                // S·ª¨A: D√πng ephemeral message thay v√¨ reply v√† delete
                await message.channel.send({
                    content: 'B·∫°n ch∆∞a c√≥ Pok√©mon n√†o ƒë·ªÉ chi·∫øn ƒë·∫•u! H√£y b·∫Øt Pok√©mon ƒë·∫ßu ti√™n c·ªßa b·∫°n b·∫±ng c√°ch ƒë·ª£i m·ªôt Pok√©mon xu·∫•t hi·ªán r·ªìi d√πng l·ªánh `!catch` ho·∫∑c ch·ªçn m·ªôt Pok√©mon b·∫±ng `!mypokemons`.',
                    flags: MessageFlags.Ephemeral
                }).catch(e => console.error("Could not send no pokemon message:", e));
                return;
            }

            if (userPokemon.training_start_time) {
                // S·ª¨A: D√πng ephemeral message thay v√¨ reply v√† delete
                await message.channel.send({
                    content: `B·∫°n kh√¥ng th·ªÉ ƒë∆∞a **${userPokemon.nickname || userPokemon.pokemon_name}** v√†o tr·∫≠n chi·∫øn v√¨ n√≥ ƒëang ƒë∆∞·ª£c hu·∫•n luy·ªán! Vui l√≤ng d√πng \`${prefix}collecttrain\` ƒë·ªÉ nh·∫≠n l·∫°i.`,
                    flags: MessageFlags.Ephemeral
                }).catch(e => console.error("Could not send training pokemon message:", e));
                return;
            }

            // --- L·∫§Y V√Ä KH·ªûI T·∫†O POKEMON HOANG D√É ---
            const wildPokeCopy = await getAndInitializeWildPokemon(userPokemon);

            if (!wildPokeCopy) {
                // S·ª¨A: D√πng ephemeral message thay v√¨ reply v√† delete
                await message.channel.send({
                    content: 'Kh√¥ng th·ªÉ t√¨m th·∫•y Pok√©mon hoang d√£ n√†o ƒë·ªÉ chi·∫øn ƒë·∫•u. Vui l√≤ng th·ª≠ l·∫°i sau.',
                    flags: MessageFlags.Ephemeral
                }).catch(e => console.error("Could not send no wild pokemon message:", e));
                return;
            }

            let userPokeCopy = { ...userPokemon };
            userPokeCopy.current_hp = userPokemon.max_hp; // ƒê·∫£m b·∫£o Pok√©mon ng∆∞·ªùi ch∆°i b·∫Øt ƒë·∫ßu v·ªõi HP ƒë·∫ßy ƒë·ªß

            // --- CH·∫†Y TR·∫¨N ƒê·∫§U ---
            const initialBattleEmbed = generateBattleEmbed(userPokeCopy, wildPokeCopy, [`Tr·∫≠n chi·∫øn gi·ªØa ${userPokeCopy.nickname || userPokemon.pokemon_name} (Lv.${userPokeCopy.level}) v√† ${wildPokeCopy.pokemon_name} (Lv.${wildPokeCopy.level}) s·∫Øp b·∫Øt ƒë·∫ßu!`], true);
            // S·ª¨A: D√πng message.channel.send thay v√¨ message.reply ƒë·ªÉ tr√°nh l·ªói Unknown Message
            const battleMessage = await message.channel.send({ embeds: [initialBattleEmbed] }).catch(e => console.error("Could not send initial battle message:", e));

            if (!battleMessage) { // Ki·ªÉm tra n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c tin nh·∫Øn battleMessage
                console.error("[BATTLE_COMMAND_ERROR] Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn battle kh·ªüi t·∫°o.");
                await message.channel.send({
                    content: 'ƒê√£ c√≥ l·ªói x·∫£y ra khi b·∫Øt ƒë·∫ßu tr·∫≠n chi·∫øn (kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn). Vui l√≤ng th·ª≠ l·∫°i sau.',
                    flags: MessageFlags.Ephemeral
                }).catch(e => console.error("Could not send critical error message:", e));
                return;
            }


            const battleResult = await simulateFullBattle(userPokeCopy, wildPokeCopy, battleMessage);

            const { userPokemonFinal, wildPokemonFinal, battleResultType, fullBattleLog } = battleResult;

            // --- X·ª¨ L√ù K·∫æT QU·∫¢ TR·∫¨N ƒê·∫§U ---
            let finalEmbed = generateBattleEmbed(
                userPokemonFinal,
                wildPokemonFinal,
                fullBattleLog,
                false
            );

            if (battleResultType === 'win') {
                finalEmbed.setTitle(`üéâ Chi·∫øn th·∫Øng! ${userPokemonFinal.nickname || userPokemonFinal.pokemon_name} ƒë√£ th·∫Øng!`);
                finalEmbed.setColor(0x32CD32);

                // --- T√çNH TO√ÅN EXP V√Ä POKECOIN M·ªöI ---
                const expGain = calculateExpGain(userPokemonFinal, wildPokemonFinal);
                const pokecoinGain = calculatePokecoinGain(userPokemonFinal, wildPokemonFinal);

                let updatedExp = userPokemonFinal.experience + expGain;
                let updatedLevel = userPokemonFinal.level;
                let levelUpMessage = '';
                let statsIncreasedMessage = '';

                while (updatedLevel < 100 && updatedExp >= calculateExpToNextLevel(updatedLevel)) {
                    updatedExp -= calculateExpToNextLevel(updatedLevel);
                    updatedLevel++;

                    const oldMaxHp = userPokemonFinal.max_hp;
                    const oldAttack = userPokemonFinal.attack;
                    const oldDefense = userPokemonFinal.defense;
                    const oldSpecialAttack = userPokemonFinal.special_attack;
                    const oldSpecialDefense = userPokemonFinal.special_defense;
                    const oldSpeed = userPokemonFinal.speed;

                    const newMaxHp = calculateHP(userPokemonFinal.base_hp, userPokemonFinal.hp_iv, updatedLevel);
                    const newAttack = calculateStat(userPokemonFinal.base_attack, userPokemonFinal.attack_iv, updatedLevel);
                    const newDefense = calculateStat(userPokemonFinal.base_defense, userPokemonFinal.defense_iv, updatedLevel);
                    const newSpecialAttack = calculateStat(userPokemonFinal.base_special_attack, userPokemonFinal.special_attack_iv, updatedLevel);
                    const newSpecialDefense = calculateStat(userPokemonFinal.base_special_defense, userPokemonFinal.special_defense_iv, updatedLevel);
                    const newSpeed = calculateStat(userPokemonFinal.base_speed, userPokemonFinal.speed_iv, updatedLevel);

                    userPokemonFinal.level = updatedLevel;
                    userPokemonFinal.max_hp = newMaxHp;
                    userPokemonFinal.attack = newAttack;
                    userPokemonFinal.defense = newDefense;
                    userPokemonFinal.special_attack = newSpecialAttack;
                    userPokemonFinal.special_defense = newSpecialDefense;
                    userPokemonFinal.speed = newSpeed;

                    levelUpMessage += `\n${userPokemonFinal.nickname || userPokemonFinal.pokemon_name} ƒë√£ l√™n **Level ${updatedLevel}**! üéâ`;
                    statsIncreasedMessage += `\nHP: ${oldMaxHp} -> ${newMaxHp} (+${newMaxHp - oldMaxHp})`;
                    statsIncreasedMessage += ` | ATK: ${oldAttack} -> ${newAttack} (+${newAttack - oldAttack})`;
                    statsIncreasedMessage += ` | DEF: ${oldDefense} -> ${newDefense} (+${newDefense - oldDefense})`;
                }
                
                if (updatedLevel >= 100) {
                    updatedExp = 0;
                }

                await db('user_pokemons')
                    .where({ id: userPokemonFinal.id })
                    .update({
                        experience: updatedExp,
                        level: updatedLevel,
                        current_hp: userPokemonFinal.max_hp,
                        max_hp: userPokemonFinal.max_hp,
                        attack: userPokemonFinal.attack,
                        defense: userPokemonFinal.defense,
                        special_attack: userPokemonFinal.special_attack,
                        special_defense: userPokemonFinal.special_defense,
                        speed: userPokemonFinal.speed,
                        updated_at: new Date()
                    });

                await db('users')
                    .where({ discord_id: userId })
                    .increment('pokecoins', pokecoinGain);

                const expNeeded = (updatedLevel < 100) ? calculateExpToNextLevel(updatedLevel) : 0;
                finalEmbed.setFooter({ 
                    text: `B·∫°n nh·∫≠n ƒë∆∞·ª£c ${expGain} EXP v√† ${pokecoinGain} Pokecoin!${levelUpMessage}\n` +
                          (updatedLevel < 100 ? `EXP hi·ªán t·∫°i: ${updatedExp}/${expNeeded} ƒë·ªÉ l√™n Level ${updatedLevel + 1}` : `Pok√©mon ƒë√£ ƒë·∫°t c·∫•p ƒë·ªô t·ªëi ƒëa (Lv.100)!`) +
                          (statsIncreasedMessage ? `\nCh·ªâ s·ªë tƒÉng: ${statsIncreasedMessage}` : '')
                });

            } else if (battleResultType === 'lose' || battleResultType === 'draw') {
                finalEmbed.setTitle(`üòî Tr·∫≠n chi·∫øn k·∫øt th√∫c!`);
                finalEmbed.setColor(0xFF4500);
                if (battleResultType === 'lose') {
                    finalEmbed.setDescription(`${finalEmbed.data.description || ''}\n${userPokemonFinal.nickname || userPokemonFinal.pokemon_name} ƒë√£ g·ª•c ng√£.`);
                    finalEmbed.setFooter({ text: `B·∫°n ƒë√£ thua tr·∫≠n chi·∫øn! HP c·ªßa Pok√©mon ƒë∆∞·ª£c h·ªìi ph·ª•c.` });
                } else {
                    finalEmbed.setDescription(`${finalEmbed.data.description || ''}\nTr·∫≠n chi·∫øn k·∫øt th√∫c trong b·∫ø t·∫Øc.`);
                    finalEmbed.setFooter({ text: `Tr·∫≠n chi·∫øn k·∫øt th√∫c. HP c·ªßa Pok√©mon ƒë∆∞·ª£c h·ªìi ph·ª•c.` });
                }

                await db('user_pokemons')
                    .where({ id: userPokemonFinal.id })
                    .update({
                        current_hp: userPokemonFinal.max_hp,
                        updated_at: new Date()
                    });
            }

            await battleMessage.edit({ embeds: [finalEmbed] });

        } catch (error) {
            console.error('[BATTLE_COMMAND_ERROR] L·ªói kh√¥ng mong mu·ªën khi th·ª±c hi·ªán l·ªánh battle:', error);
            // S·ª¨A: D√πng message.channel.send v·ªõi MessageFlags.Ephemeral ho·∫∑c message.editReply t√πy thu·ªôc tr·∫°ng th√°i
            if (!message.replied && !message.deferred) {
                // N·∫øu ch∆∞a ph·∫£n h·ªìi ho·∫∑c ho√£n ph·∫£n h·ªìi, g·ª≠i m·ªôt tin nh·∫Øn l·ªói ephemeral m·ªõi
                await message.channel.send({
                    content: 'ƒê√£ c√≥ l·ªói x·∫£y ra trong tr·∫≠n chi·∫øn. Vui l√≤ng th·ª≠ l·∫°i sau.',
                    flags: MessageFlags.Ephemeral
                }).catch(err => console.error("L·ªói khi g·ª≠i tin nh·∫Øn l·ªói ephemeral:", err));
            } else { // N·∫øu ƒë√£ ph·∫£n h·ªìi ho·∫∑c ho√£n ph·∫£n h·ªìi, th·ª≠ ch·ªânh s·ª≠a ph·∫£n h·ªìi ƒë√≥
                await message.editReply('ƒê√£ c√≥ l·ªói x·∫£y ra trong tr·∫≠n chi·∫øn. Vui l√≤ng th·ª≠ l·∫°i sau.').catch(err => console.error("L·ªói khi ch·ªânh s·ª≠a tin nh·∫Øn l·ªói:", err));
            }
        }
    },
};