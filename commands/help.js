// commands/help.js
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { PREFIX } = require('../config'); // Import PREFIX t·ª´ config ƒë·ªÉ hi·ªÉn th·ªã
const { sendOwnerDM } = require('../utils/errors/errorReporter'); // Import sendOwnerDM

const COMMANDS_PER_PAGE = 7; // S·ªë l∆∞·ª£ng l·ªánh hi·ªÉn th·ªã tr√™n m·ªói trang

module.exports = {
    name: 'help',
    description: 'Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n v√† danh s√°ch c√°c l·ªánh c·ªßa bot.',
    cooldown: 5, // Th·ªùi gian h·ªìi chi√™u

    async execute(message, args, client, db) {
        const userId = message.author.id; // L·∫•y userId ƒë·ªÉ x·ª≠ l√Ω t∆∞∆°ng t√°c n√∫t

        // ƒê·ªãnh nghƒ©a t·∫•t c·∫£ c√°c l·ªánh v√† m√¥ t·∫£ c·ªßa ch√∫ng
        const allCommands = [
            `\`${PREFIX}start\` - B·∫Øt ƒë·∫ßu h√†nh tr√¨nh c·ªßa b·∫°n v√† ch·ªçn Pokemon kh·ªüi ƒë·∫ßu.`,
            `\`${PREFIX}mypokemon\` - Xem danh s√°ch v√† ch·ªçn Pokemon ch√≠nh c·ªßa b·∫°n.`,
            `\`${PREFIX}profile\` - Ki·ªÉm tra s·ªë Pokecoin v√† v·∫≠t ph·∫©m c·ªßa b·∫°n.`,
            `\`${PREFIX}battle\` - D√πng ƒë·ªÉ luy·ªán c·∫•p cho Pokemon.`,
            `\`${PREFIX}train\` - G·ª≠i Pokemon ƒëi hu·∫•n luy·ªán (T·ªëi ƒëa 24h).`,
            `\`${PREFIX}ctrain\` - Nh·∫≠n v·ªÅ Pokemon ƒë∆∞a ƒëi hu·∫•n luy·ªán.`,
            `\`${PREFIX}vskill\` - Xem danh s√°ch skill c·ªßa Pokemon.`,
            `\`${PREFIX}lskill\` - H·ªçc skill cho Pokemon.`,
            `\`${PREFIX}evolve\` - Ti·∫øn h√≥a Pokemon d·∫°ng th∆∞·ªùng.`,
            `\`${PREFIX}form\` - Ti·∫øn h√≥a Pokemon d·∫°ng ƒë·∫∑c bi·ªát.`,
            `\`${PREFIX}useitem\` - TƒÉng ch·ªâ s·ªë cho Pokemon.`,
            `\`${PREFIX}shop\` - Xem danh s√°ch v·∫≠t ph·∫©m c√≥ trong c·ª≠a h√†ng.`,
            `\`${PREFIX}buy\` - Mua v·∫≠t ph·∫©m c√≥ trong c·ª≠a h√†ng.`,
            `\`${PREFIX}sell\` - B√°n Pokemon cho Bot.`,
            `\`${PREFIX}sellpokemon\` - ƒêƒÉng b√°n Pokemon l√™n th·ªã tr∆∞·ªùng (T·ªëi ƒëa 24h).`,
            `\`${PREFIX}sellitem\` - ƒêƒÉng b√°n Item l√™n th·ªã tr∆∞·ªùng (T·ªëi ƒëa 24h).`,
            `\`${PREFIX}market\` - Xem danh s√°ch v·∫≠t ph·∫©m tr√™n th·ªã tr∆∞·ªùng.`,
            `\`${PREFIX}buymk\` - Mua v·∫≠t ph·∫©m tr√™n th·ªã tr∆∞·ªùng.`,
            `\`${PREFIX}cancelmk\` - R√∫t v·∫≠t ph·∫©m kh·ªèi th·ªã tr∆∞·ªùng.`,
            `\`${PREFIX}nickname\` - Thay ƒë·ªïi nickname Pokemon.`,
            `\`${PREFIX}boss\` - ƒê√°nh boss ƒë·ªÉ nh·∫≠n nh·ªØng ph·∫ßn th∆∞·ªüng h·∫•p d·∫´n.`,
            '**C√°c l·ªánh cao c·∫•p h∆°n vui l√≤ng li√™n h·ªá admin ƒë·ªÉ k√≠ch ho·∫°t.**'
            // Th√™m c√°c l·ªánh kh√°c v√†o ƒë√¢y khi b·∫°n ph√°t tri·ªÉn bot
        ];

        const totalPages = Math.ceil(allCommands.length / COMMANDS_PER_PAGE);
        let currentPage = parseInt(args[0]) || 1;
        if (currentPage < 1) currentPage = 1;
        if (currentPage > totalPages) currentPage = totalPages;

        const generateEmbed = (page) => {
            const start = (page - 1) * COMMANDS_PER_PAGE;
            const end = start + COMMANDS_PER_PAGE;
            const commandsToShow = allCommands.slice(start, end);

            const embed = new EmbedBuilder()
                .setColor(0x0099FF)
                .setTitle('üìö H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng Bot')
                .setDescription(
                    'Ch√†o m·ª´ng ƒë·∫øn v·ªõi th·∫ø gi·ªõi c·ªßa nh·ªØng ƒëi·ªÅu kh√¥ng t∆∞·ªüng! H√£y b·∫Øt ƒë·∫ßu cu·ªôc phi√™u l∆∞u Pokemon c·ªßa b·∫°n.\n\n' +
                    '**C√°c l·ªánh ti·ªÅn t·ªë hi·ªán c√≥:**\n' +
                    commandsToShow.join('\n') + '\n\n' +
                    `ƒê·ªÉ xem l·∫°i h∆∞·ªõng d·∫´n n√†y, h√£y d√πng l·∫°i l·ªánh \`${PREFIX}help\`.`
                )
                .setFooter({ text: `Trang ${page}/${totalPages} | Powered by Demonking` })
                .setTimestamp();
            return embed;
        };

        const generateButtons = (page) => {
            return new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`help_prev_${page}`)
                        .setLabel('Trang tr∆∞·ªõc')
                        .setStyle(ButtonStyle.Primary)
                        .setDisabled(page === 1),
                    new ButtonBuilder()
                        .setCustomId(`help_next_${page}`)
                        .setLabel('Trang sau')
                        .setStyle(ButtonStyle.Primary)
                        .setDisabled(page === totalPages),
                );
        };

        const initialEmbed = generateEmbed(currentPage);
        const initialButtons = generateButtons(currentPage);

        let replyMessage;
        try {
            // G·ª≠i tin nh·∫Øn ph·∫£n h·ªìi ch√≠nh b·∫±ng channel.send
            replyMessage = await message.channel.send({
                embeds: [initialEmbed],
                components: [initialButtons],
                fetchReply: true // Quan tr·ªçng ƒë·ªÉ l·∫•y ƒë·ªëi t∆∞·ª£ng tin nh·∫Øn ƒë√£ g·ª≠i
            });
        } catch (e) {
            console.error("[HELP_COMMAND_ERROR] Could not send help message:", e);
            sendOwnerDM(client, `[L·ªói Help Command] L·ªói khi g·ª≠i tin nh·∫Øn help cho ${userId}.`, e);
            return; // Tho√°t n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c tin nh·∫Øn
        }

        // T·∫°o collector ƒë·ªÉ l·∫Øng nghe t∆∞∆°ng t√°c n√∫t b·∫•m
        const collector = replyMessage.createMessageComponentCollector({
            filter: i => i.user.id === userId && i.customId.startsWith('help_'),
            time: 120000 // Collector s·∫Ω ho·∫°t ƒë·ªông trong 120 gi√¢y
        });

        collector.on('collect', async interaction => {
            // ƒê·∫£m b·∫£o ch·ªâ x·ª≠ l√Ω n·∫øu ƒë√≥ l√† m·ªôt button interaction
            if (!interaction.isButton()) return;

            const [_, action, pageNum] = interaction.customId.split('_');
            let newPage = parseInt(pageNum);

            if (action === 'prev') {
                newPage--;
            } else if (action === 'next') {
                newPage++;
            }

            // ƒê·∫£m b·∫£o trang m·ªõi n·∫±m trong gi·ªõi h·∫°n
            if (newPage < 1) newPage = 1;
            if (newPage > totalPages) newPage = totalPages;

            // N·∫øu trang kh√¥ng ƒë·ªïi, ch·ªâ c·∫ßn c·∫≠p nh·∫≠t t∆∞∆°ng t√°c m√† kh√¥ng c·∫ßn re-render embed/buttons
            if (newPage === currentPage) {
                try {
                    await interaction.update({}); // G·ª≠i m·ªôt update r·ªóng ƒë·ªÉ acknowledge t∆∞∆°ng t√°c
                } catch (updateError) {
                    if (updateError.code === 10062 || updateError.code === 40060) {
                        console.warn(`[HELP_COLLECTOR_WARN] T∆∞∆°ng t√°c ƒë√£ h·∫øt h·∫°n ho·∫∑c ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω: ${updateError.code}`);
                    } else {
                        console.error(`[HELP_COLLECTOR_ERROR] L·ªói khi c·∫≠p nh·∫≠t t∆∞∆°ng t√°c r·ªóng cho ${userId}:`, updateError);
                        sendOwnerDM(client, `[L·ªói Help Collector] L·ªói khi c·∫≠p nh·∫≠t t∆∞∆°ng t√°c r·ªóng cho ${userId}.`, updateError);
                    }
                }
                return;
            }

            currentPage = newPage; // C·∫≠p nh·∫≠t currentPage

            const newEmbed = generateEmbed(currentPage);
            const newButtons = generateButtons(currentPage);

            try {
                // C·∫≠p nh·∫≠t tin nh·∫Øn g·ªëc c·ªßa bot
                await interaction.update({
                    embeds: [newEmbed],
                    components: [newButtons]
                });
            } catch (updateError) {
                if (updateError.code === 10062 || updateError.code === 40060) {
                    console.warn(`[HELP_COLLECTOR_WARN] T∆∞∆°ng t√°c ƒë√£ h·∫øt h·∫°n ho·∫∑c ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω: ${updateError.code}`);
                } else {
                    console.error(`[HELP_COLLECTOR_ERROR] L·ªói khi c·∫≠p nh·∫≠t tin nh·∫Øn help trong collector cho ${userId}:`, updateError);
                    sendOwnerDM(client, `[L·ªói Help Collector] L·ªói khi c·∫≠p nh·∫≠t tin nh·∫Øn ph√¢n trang cho ${userId}.`, updateError);
                }
            }
        });

        collector.on('end', async (collected, reason) => {
            // Khi collector k·∫øt th√∫c (h·∫øt th·ªùi gian ho·∫∑c d·ª´ng th·ªß c√¥ng), v√¥ hi·ªáu h√≥a c√°c n√∫t
            if (replyMessage) { // ƒê·∫£m b·∫£o replyMessage t·ªìn t·∫°i
                const disabledRow = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId(`help_prev_${currentPage}`)
                            .setLabel('Trang tr∆∞·ªõc')
                            .setStyle(ButtonStyle.Primary)
                            .setDisabled(true),
                        new ButtonBuilder()
                            .setCustomId(`help_next_${currentPage}`)
                            .setLabel('Trang sau')
                            .setStyle(ButtonStyle.Primary)
                            .setDisabled(true),
                    );
                try {
                    // Ki·ªÉm tra xem tin nh·∫Øn c√≥ c√≤n t·ªìn t·∫°i v√† c√≥ th·ªÉ ch·ªânh s·ª≠a kh√¥ng
                    const fetchedMessage = await message.channel.messages.fetch(replyMessage.id).catch(() => null);
                    if (fetchedMessage && fetchedMessage.editable) {
                        await fetchedMessage.edit({ components: [disabledRow] });
                    }
                } catch (e) {
                    // B·∫Øt l·ªói Unknown Message (10008) n·∫øu tin nh·∫Øn ƒë√£ b·ªã x√≥a
                    if (e.code === 10008) {
                        console.warn(`[HELP_COLLECTOR_WARN] Tin nh·∫Øn help ƒë√£ b·ªã x√≥a, kh√¥ng th·ªÉ v√¥ hi·ªáu h√≥a n√∫t.`);
                    } else {
                        console.error("Could not disable help buttons:", e);
                        sendOwnerDM(client, `[L·ªói Help Collector End] L·ªói khi v√¥ hi·ªáu h√≥a n√∫t cho ${userId}.`, e);
                    }
                }
            }
        });

        // Tin nh·∫Øn l·ªánh c·ªßa ng∆∞·ªùi d√πng (message) s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω x√≥a ·ªü index.js ho·∫∑c global.
        // Tin nh·∫Øn ph·∫£n h·ªìi c·ªßa bot (replyMessage) s·∫Ω t·ª± ƒë·ªông b·ªã v√¥ hi·ªáu h√≥a n√∫t sau 120s b·ªüi collector.
    },
};
