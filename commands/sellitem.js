// commands/sellitem.js
const { EmbedBuilder, MessageFlags } = require('discord.js');
const { db } = require('../db');
const { isChannelAllowed } = require('../utils/core/channelUtils'); // Import h√†m ki·ªÉm tra k√™nh

const MARKETPLACE_FEE_PERCENTAGE = 0.10;

module.exports = {
    name: 'sellitem',
    description: 'ƒêƒÉng b√°n m·ªôt ho·∫∑c nhi·ªÅu v·∫≠t ph·∫©m c·ªßa b·∫°n l√™n th·ªã tr∆∞·ªùng.',
    aliases: ['si'],
    usage: '<item_id> <quantity> <price> [description]',
    cooldown: 10,

    async execute(message, args, client) {
        const userId = message.author.id;
        const prefix = client.config.PREFIX;
        const guildId = message.guild.id;
        const channelId = message.channel.id;

        // KI·ªÇM TRA K√äNH ƒê∆Ø·ª¢C PH√âP
        const allowed = await isChannelAllowed(guildId, channelId, 'market');
        if (!allowed) {
            await message.channel.send({
                content: `<@${userId}> L·ªánh \`sellitem\` ch·ªâ c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong c√°c k√™nh th·ªã tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p b·ªüi qu·∫£n tr·ªã vi√™n.`,
                flags: MessageFlags.Ephemeral
            });
            return;
        }

        if (args.length < 3) {
            await message.channel.send({
                content: `<@${userId}> Vui l√≤ng cung c·∫•p ID v·∫≠t ph·∫©m, s·ªë l∆∞·ª£ng v√† gi√° b√°n. C√°ch d√πng: \`${prefix}sellitem <item_id> <quantity> <price> [description]\``,
                flags: MessageFlags.Ephemeral
            });
            return;
        }

        const itemIdToSell = parseInt(args[0]);
        const quantityToSell = parseInt(args[1]);
        const price = parseInt(args[2]);
        const description = args.slice(3).join(' ');

        if (isNaN(itemIdToSell) || itemIdToSell <= 0) {
            await message.channel.send({
                content: `<@${userId}> ID v·∫≠t ph·∫©m kh√¥ng h·ª£p l·ªá. Vui l√≤ng cung c·∫•p m·ªôt s·ªë nguy√™n d∆∞∆°ng.`,
                flags: MessageFlags.Ephemeral
            });
            return;
        }

        if (isNaN(quantityToSell) || quantityToSell <= 0) {
            await message.channel.send({
                content: `<@${userId}> S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng cung c·∫•p m·ªôt s·ªë nguy√™n d∆∞∆°ng l·ªõn h∆°n 0.`,
                flags: MessageFlags.Ephemeral
            });
            return;
        }

        if (isNaN(price) || price <= 0) {
            await message.channel.send({
                content: `<@${userId}> Gi√° b√°n kh√¥ng h·ª£p l·ªá. Vui l√≤ng cung c·∫•p m·ªôt s·ªë nguy√™n d∆∞∆°ng l·ªõn h∆°n 0.`,
                flags: MessageFlags.Ephemeral
            });
            return;
        }

        try {
            const userItem = await db('user_inventory_items')
                .where({ user_discord_id: userId, item_id: itemIdToSell })
                .first();

            if (!userItem || userItem.quantity < quantityToSell) {
                await message.channel.send({
                    content: `<@${userId}> B·∫°n kh√¥ng c√≥ ƒë·ªß s·ªë l∆∞·ª£ng v·∫≠t ph·∫©m n√†y ƒë·ªÉ b√°n. B·∫°n hi·ªán c√≥ ${userItem ? userItem.quantity : 0} m√≥n.`,
                    flags: MessageFlags.Ephemeral
                });
                return;
            }

            const itemDetails = await db('items')
                .where({ item_id: itemIdToSell })
                .first();

            if (!itemDetails) {
                await message.channel.send({
                    content: `<@${userId}> Kh√¥ng t√¨m th·∫•y v·∫≠t ph·∫©m v·ªõi ID n√†y.`,
                    flags: MessageFlags.Ephemeral
                });
                return;
            }

            // Ghi nh·∫≠n b√°n th√†nh c√¥ng m√† kh√¥ng tr·ª´ v·∫≠t ph·∫©m kh·ªèi kho
            await db.transaction(async trx => {
                const [listing] = await trx('marketplace_listings').insert({
                    seller_discord_id: userId,
                    item_type: 'item',
                    item_reference_id: itemIdToSell, // V·∫´n gi·ªØ nguy√™n item_id
                    quantity: quantityToSell,
                    price: price,
                    description: description || null,
                    status: 'active',
                    listed_at: new Date(),
                    listing_expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000),
                }).returning('*');

                const embed = new EmbedBuilder()
                    .setColor(0x00FF00)
                    .setTitle('üéâ ƒêƒÉng b√°n V·∫≠t ph·∫©m th√†nh c√¥ng!')
                    .setDescription(`V·∫≠t ph·∫©m **${itemDetails.name}** (x${quantityToSell}) ƒë√£ ƒë∆∞·ª£c ƒëƒÉng b√°n tr√™n th·ªã tr∆∞·ªùng v·ªõi gi√° **${price} Pokecoin**.\n` +
                                     `M√£ ƒëƒÉng b√°n c·ªßa b·∫°n l√†: \`${listing.listing_id}\``)
                    .addFields(
                        { name: 'V·∫≠t ph·∫©m', value: `${itemDetails.name} (x${quantityToSell})`, inline: true },
                        { name: 'Gi√°', value: `${price} Pokecoin`, inline: true },
                        { name: 'M√¥ t·∫£', value: description || 'Kh√¥ng c√≥', inline: false }
                    )
                    .setFooter({ text: `Ph√≠ giao d·ªãch khi b√°n th√†nh c√¥ng/r√∫t l·∫°i l√† ${MARKETPLACE_FEE_PERCENTAGE * 100}% gi√° tr·ªã.` });

                await message.channel.send({ embeds: [embed] });
            });

        } catch (error) {
            console.error('[SELL_ITEM_COMMAND_ERROR] L·ªói khi ƒëƒÉng b√°n v·∫≠t ph·∫©m:', error);
            await message.channel.send({
                content: `<@${userId}> ƒê√£ c√≥ l·ªói x·∫£y ra khi ƒëƒÉng b√°n v·∫≠t ph·∫©m c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.`,
                flags: MessageFlags.Ephemeral
            });
        }
    },
};
