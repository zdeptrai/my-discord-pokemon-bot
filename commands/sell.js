// commands/sell.js
const { EmbedBuilder } = require('discord.js');

const CURRENCY_NAME = 'PokeCoin'; // ƒê∆°n v·ªã ti·ªÅn t·ªá c·ªßa b·∫°n
const BASE_SELL_PRICE = 500; // Gi√° c∆° b·∫£n khi b√°n m·ªôt Pok√©mon cho bot

module.exports = {
    name: 'sell',
    description: `B√°n m·ªôt Pok√©mon t·ª´ kho c·ªßa b·∫°n cho bot ƒë·ªÉ nh·∫≠n ${BASE_SELL_PRICE} ${CURRENCY_NAME}.`,
    aliases: ['b√°n'],
    usage: '<pokemon_id>',
    cooldown: 10, // Cooldown 10 gi√¢y ƒë·ªÉ tr√°nh spam ho·∫∑c b√°n nh·∫ßm li√™n t·ª•c

    async execute(message, args, client, db) {
        const userId = message.author.id;

        if (args.length === 0) {
            return message.channel.send({
                content: `<@${userId}> Vui l√≤ng cung c·∫•p ID c·ªßa Pok√©mon b·∫°n mu·ªën b√°n. V√≠ d·ª•: \`${client.config.PREFIX}sell 123\``,
                ephemeral: true
            });
        }

        const pokemonId = parseInt(args[0]);

        if (isNaN(pokemonId) || pokemonId <= 0) {
            return message.channel.send({
                content: `<@${userId}> ID Pok√©mon kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p m·ªôt s·ªë ID d∆∞∆°ng.`,
                ephemeral: true
            });
        }

        try {
            // Kh·ªüi t·∫°o transaction ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn d·ªØ li·ªáu
            // (N·∫øu x√≥a Pok√©mon th√†nh c√¥ng m√† c·ªông ti·ªÅn th·∫•t b·∫°i, ho·∫∑c ng∆∞·ª£c l·∫°i)
            await db.transaction(async trx => {
                // 1. T√¨m Pok√©mon theo ID v√† ƒë·∫£m b·∫£o n√≥ thu·ªôc v·ªÅ ng∆∞·ªùi d√πng
                const pokemonToSell = await trx('user_pokemons')
                    .where('id', pokemonId)
                    .andWhere('user_discord_id', userId)
                    .select('nickname', 'pokedex_id', 'is_on_marketplace')
                    .first();

                if (!pokemonToSell) {
                    throw new Error(`Kh√¥ng t√¨m th·∫•y Pok√©mon v·ªõi ID **${pokemonId}** trong kho c·ªßa b·∫°n.`);
                }
                
                // Ki·ªÉm tra n·∫øu Pok√©mon ƒëang tr√™n marketplace
                if (pokemonToSell.is_on_marketplace) {
                    throw new Error(`Pok√©mon **${pokemonToSell.nickname || 'ID: ' + pokemonId}** hi·ªán ƒëang ƒë∆∞·ª£c rao b√°n tr√™n Marketplace. Vui l√≤ng g·ª° n√≥ xu·ªëng tr∆∞·ªõc khi b√°n!`);
                }

                // L·∫•y t√™n g·ªëc c·ªßa Pok√©mon ƒë·ªÉ hi·ªÉn th·ªã trong th√¥ng b√°o
                const originalPokemonInfo = await trx('pokemons')
                    .where('pokedex_id', pokemonToSell.pokedex_id)
                    .select('name')
                    .first();
                const originalPokemonName = originalPokemonInfo ? originalPokemonInfo.name : 'Unknown Pok√©mon';

                // 2. X√≥a Pok√©mon kh·ªèi b·∫£ng user_pokemons
                const deletedRows = await trx('user_pokemons')
                    .where('id', pokemonId)
                    .andWhere('user_discord_id', userId)
                    .del(); // `del()` l√† h√†m x√≥a trong Knex

                if (deletedRows === 0) {
                    // M·∫∑c d√π ƒë√£ ki·ªÉm tra ·ªü tr√™n, nh∆∞ng ƒë√¢y l√† m·ªôt l·ªõp b·∫£o v·ªá n·ªØa
                    throw new Error('Kh√¥ng th·ªÉ x√≥a Pok√©mon. Vui l√≤ng th·ª≠ l·∫°i.');
                }

                // 3. C·ªông ti·ªÅn cho ng∆∞·ªùi d√πng
                const updatedUserRows = await trx('users')
                    .where('discord_id', userId)
                    .increment('pokecoins', BASE_SELL_PRICE);

                if (updatedUserRows === 0) {
                    // L·ªói n·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng (m·∫∑c d√π ƒë√£ ki·ªÉm tra registered tr∆∞·ªõc ƒë√≥)
                    throw new Error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë d∆∞ c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i.');
                }

                // L∆∞u l·∫°i s·ªë d∆∞ m·ªõi ƒë·ªÉ hi·ªÉn th·ªã trong embed
                const userAfterSell = await trx('users')
                    .where('discord_id', userId)
                    .select('pokecoins')
                    .first();
                const newBalance = userAfterSell ? userAfterSell.pokecoins : 0;

                // Chu·∫©n b·ªã th√¥ng tin Pok√©mon ƒë√£ b√°n cho embed
                const pokemonNameForEmbed = pokemonToSell.nickname ? 
                    `${pokemonToSell.nickname} (**${originalPokemonName}**)` : 
                    `**${originalPokemonName}** (ID: ${pokemonId})`;

                // Giao d·ªãch th√†nh c√¥ng, g·ª≠i embed th√¥ng b√°o
                const embed = new EmbedBuilder()
                    .setColor('#00FFFF') // M√†u xanh cyan
                    .setTitle('üí∏ Pok√©mon ƒê√£ B√°n!')
                    .setDescription(`B·∫°n ƒë√£ b√°n th√†nh c√¥ng Pok√©mon: ${pokemonNameForEmbed}.`)
                    .addFields(
                        { name: 'Gi√° B√°n', value: `${BASE_SELL_PRICE} ${CURRENCY_NAME}`, inline: true },
                        { name: 'S·ªë D∆∞ M·ªõi', value: `${newBalance} ${CURRENCY_NAME}`, inline: true }
                    )
                    .setFooter({ text: `Y√™u c·∫ßu b·ªüi ${message.author.displayName}` })
                    .setTimestamp();
                
                message.channel.send({ embeds: [embed] });
            });

        } catch (error) {
            console.error(`[SELL_COMMAND_ERROR] L·ªói khi b√°n Pok√©mon cho ng∆∞·ªùi d√πng ${userId}:`, error);
            // G·ª≠i tin nh·∫Øn l·ªói ri√™ng t∆∞
            return message.channel.send({
                content: `<@${userId}> ƒê√£ x·∫£y ra l·ªói khi b√°n Pok√©mon: **${error.message}**`,
                ephemeral: true
            });
        }
    },
};