// commands/buymarket.js
const { EmbedBuilder, MessageFlags } = require('discord.js');
const { db } = require('../db');
// const { deleteMessageWithTimeout } = require('../utils/commonUtils'); // KH√îNG C·∫¶N N·ªÆA V√å D√ôNG EPHEMERAL

const MARKETPLACE_FEE_PERCENTAGE = 0.10; // Ph√≠ 10%

module.exports = {
    name: 'buymarket',
    description: 'Mua m·ªôt Pok√©mon ho·∫∑c v·∫≠t ph·∫©m t·ª´ th·ªã tr∆∞·ªùng.',
    aliases: ['bm', 'buymk'],
    usage: '<listing_id>',
    cooldown: 5,

    async execute(message, args, client) {
        const buyerId = message.author.id;
        const prefix = client.config.PREFIX;

        if (args.length < 1) {
            await message.channel.send({
                content: `<@${buyerId}> Vui l√≤ng cung c·∫•p ID c·ªßa l∆∞·ª£t ƒëƒÉng b√°n b·∫°n mu·ªën mua. C√°ch d√πng: \`${prefix}buymarket <listing_id>\``,
                flags: MessageFlags.Ephemeral
            }).catch(e => console.error("Could not send buymarket usage message:", e));
            return;
        }

        const listingId = parseInt(args[0]);

        if (isNaN(listingId) || listingId <= 0) {
            await message.channel.send({
                content: `<@${buyerId}> ID l∆∞·ª£t ƒëƒÉng b√°n kh√¥ng h·ª£p l·ªá. Vui l√≤ng cung c·∫•p m·ªôt s·ªë nguy√™n d∆∞∆°ng.`,
                flags: MessageFlags.Ephemeral
            }).catch(e => console.error("Could not send invalid listing ID message:", e));
            return;
        }

        try {
            // S·ª≠ d·ª•ng transaction ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn d·ªØ li·ªáu
            await db.transaction(async trx => {
                const listing = await trx('marketplace_listings')
                    .where({ listing_id: listingId, status: 'active' })
                    .first();

                if (!listing) {
                    await message.channel.send({
                        content: `<@${buyerId}> Kh√¥ng t√¨m th·∫•y l∆∞·ª£t ƒëƒÉng b√°n v·ªõi ID \`${listingId}\` ho·∫∑c n√≥ ƒë√£ b·ªã b√°n/h·ªßy.`,
                        flags: MessageFlags.Ephemeral
                    }).catch(e => console.error("Could not send listing not found message:", e));
                    return;
                }

                if (listing.seller_discord_id === buyerId) {
                    await message.channel.send({
                        content: `<@${buyerId}> B·∫°n kh√¥ng th·ªÉ mua listing c·ªßa ch√≠nh m√¨nh!`,
                        flags: MessageFlags.Ephemeral
                    }).catch(e => console.error("Could not send self-purchase message:", e));
                    return;
                }

                const buyerUser = await trx('users').where({ discord_id: buyerId }).first();
                if (!buyerUser || buyerUser.pokecoins < listing.price) {
                    await message.channel.send({
                        content: `<@${buyerId}> B·∫°n kh√¥ng ƒë·ªß Pokecoin ƒë·ªÉ mua v·∫≠t ph·∫©m n√†y. B·∫°n c·∫ßn ${listing.price} Pokecoin.`,
                        flags: MessageFlags.Ephemeral
                    }).catch(e => console.error("Could not send insufficient coins message:", e));
                    return;
                }

                // X·ª≠ l√Ω d·ª±a tr√™n lo·∫°i listing
                let itemDisplayName;
                let embedColor;

                if (listing.item_type === 'pokemon') {
                    // ƒê√É S·ª¨A: JOIN v·ªõi b·∫£ng 'pokemons' ƒë·ªÉ l·∫•y t√™n c∆° b·∫£n c·ªßa Pok√©mon
                    const pokemon = await trx('user_pokemons')
                        .leftJoin('pokemons', 'user_pokemons.pokedex_id', 'pokemons.pokedex_id')
                        .where('user_pokemons.id', listing.item_reference_id)
                        .andWhere('user_pokemons.user_discord_id', listing.seller_discord_id)
                        .select('user_pokemons.*', 'pokemons.name as pokemon_base_name') // L·∫•y t√™n c∆° b·∫£n
                        .first();

                    if (!pokemon) {
                        await message.channel.send({
                            content: `<@${buyerId}> Pok√©mon n√†y kh√¥ng c√≤n thu·ªôc s·ªü h·ªØu c·ªßa ng∆∞·ªùi b√°n. Listing ƒë√£ b·ªã l·ªói.`,
                            flags: MessageFlags.Ephemeral
                        }).catch(e => console.error("Could not send pokemon not owned message:", e));
                        // ƒê√°nh d·∫•u listing l√† ƒë√£ h·ªßy n·∫øu Pok√©mon kh√¥ng c√≤n thu·ªôc v·ªÅ ng∆∞·ªùi b√°n
                        await trx('marketplace_listings')
                            .where({ listing_id: listingId })
                            .update({ status: 'cancelled', updated_at: new Date() });
                        return;
                    }

                    // Chuy·ªÉn quy·ªÅn s·ªü h·ªØu Pok√©mon
                    await trx('user_pokemons')
                        .where({ id: listing.item_reference_id })
                        .update({ user_discord_id: buyerId, updated_at: new Date() });

                    // ƒê·∫¢M B·∫¢O itemDisplayName LU√îN L√Ä CHU·ªñI
                    itemDisplayName = (pokemon.nickname || pokemon.pokemon_base_name || 'Pok√©mon kh√¥ng x√°c ƒë·ªãnh').toString();
                    embedColor = 0xFFD700; // M√†u v√†ng cho Pok√©mon
                } else if (listing.item_type === 'item') {
                    const item = await trx('user_inventory_items')
                        .where({ user_discord_id: listing.seller_discord_id, item_id: listing.item_reference_id })
                        .first();

                    if (!item || item.quantity < listing.quantity) {
                        await message.channel.send({
                            content: `<@${buyerId}> V·∫≠t ph·∫©m n√†y kh√¥ng c√≤n ƒë·ªß s·ªë l∆∞·ª£ng c·ªßa ng∆∞·ªùi b√°n. Listing ƒë√£ b·ªã l·ªói.`,
                            flags: MessageFlags.Ephemeral
                        }).catch(e => console.error("Could not send item not enough message:", e));
                        // ƒê√°nh d·∫•u listing l√† ƒë√£ h·ªßy n·∫øu v·∫≠t ph·∫©m kh√¥ng c√≤n ƒë·ªß
                        await trx('marketplace_listings')
                            .where({ listing_id: listingId })
                            .update({ status: 'cancelled', updated_at: new Date() });
                        return;
                    }

                    // Tr·ª´ s·ªë l∆∞·ª£ng v·∫≠t ph·∫©m c·ªßa ng∆∞·ªùi b√°n
                    await trx('user_inventory_items')
                        .where({ user_discord_id: listing.seller_discord_id, item_id: listing.item_reference_id })
                        .decrement('quantity', listing.quantity);

                    // C·ªông v·∫≠t ph·∫©m cho ng∆∞·ªùi mua
                    const buyerItem = await trx('user_inventory_items')
                        .where({ user_discord_id: buyerId, item_id: listing.item_reference_id })
                        .first();

                    if (buyerItem) {
                        await trx('user_inventory_items')
                            .where({ user_discord_id: buyerId, item_id: listing.item_reference_id })
                            .increment('quantity', listing.quantity);
                    } else {
                        await trx('user_inventory_items').insert({
                            user_discord_id: buyerId,
                            item_id: listing.item_reference_id,
                            quantity: listing.quantity,
                            created_at: new Date(),
                            updated_at: new Date()
                        });
                    }

                    const itemData = await trx('items').where({ item_id: listing.item_reference_id }).first();
                    // ƒê·∫¢M B·∫¢O itemDisplayName LU√îN L√Ä CHU·ªñI
                    itemDisplayName = (itemData ? itemData.name : 'V·∫≠t ph·∫©m kh√¥ng x√°c ƒë·ªãnh').toString();
                    embedColor = 0x8A2BE2; // M√†u t√≠m cho v·∫≠t ph·∫©m
                } else {
                    console.error(`[BUYMARKET_ERROR] Listing ID ${listingId} c√≥ lo·∫°i kh√¥ng h·ª£p l·ªá: ${listing.item_type}`);
                    await message.channel.send({
                        content: `<@${buyerId}> Lo·∫°i listing kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra ID listing.`,
                        flags: MessageFlags.Ephemeral
                    }).catch(e => console.error("Could not send invalid listing type message:", e));
                    return;
                }

                // C·∫≠p nh·∫≠t tr·∫°ng th√°i listing
                await trx('marketplace_listings')
                    .where({ listing_id: listingId })
                    .update({
                        status: 'sold',
                        buyer_discord_id: buyerId,
                        sold_at: new Date(),
                        updated_at: new Date()
                    });

                // Tr·ª´ Pokecoin c·ªßa ng∆∞·ªùi mua
                await trx('users')
                    .where({ discord_id: buyerId })
                    .decrement('pokecoins', listing.price);

                // C·ªông Pokecoin cho ng∆∞·ªùi b√°n (sau khi tr·ª´ ph√≠)
                const sellerPayout = Math.floor(listing.price * (1 - MARKETPLACE_FEE_PERCENTAGE));
                await trx('users')
                    .where({ discord_id: listing.seller_discord_id })
                    .increment('pokecoins', sellerPayout);

                // G·ª≠i tin nh·∫Øn x√°c nh·∫≠n cho ng∆∞·ªùi mua (kh√¥ng c·∫ßn ephemeral, mu·ªën hi·ªán c√¥ng khai)
                const buyerEmbed = new EmbedBuilder()
                    .setColor(embedColor)
                    .setTitle('üéâ Mua h√†ng th√†nh c√¥ng!')
                    .setDescription(`B·∫°n ƒë√£ mua th√†nh c√¥ng **${itemDisplayName}** v·ªõi gi√° **${listing.price} Pokecoin**!`)
                    .addFields(
                        { name: 'V·∫≠t ph·∫©m', value: itemDisplayName, inline: true },
                        { name: 'Gi√° ƒë√£ tr·∫£', value: `${listing.price} Pokecoin`, inline: true },
                        { name: 'M√£ Listing', value: `\`${listingId}\``, inline: false }
                    )
                    .setTimestamp();
                await message.channel.send({ embeds: [buyerEmbed] });

                // G·ª≠i DM cho ng∆∞·ªùi b√°n
                try {
                    const sellerUser = await trx('users').where({ discord_id: listing.seller_discord_id }).first();
                    // T√≠nh to√°n l·∫°i s·ªë d∆∞ c·ªßa ng∆∞·ªùi b√°n sau khi nh·∫≠n ti·ªÅn (ƒë·ªÉ hi·ªÉn th·ªã trong DM)
                    // L∆ØU √ù: sellerUser.pokecoins ·ªü ƒë√¢y l√† s·ªë d∆∞ TR∆Ø·ªöC khi increment.
                    // ƒê·ªÉ c√≥ s·ªë d∆∞ M·ªöI NH·∫§T, b·∫°n c·∫ßn fetch l·∫°i ho·∫∑c t√≠nh to√°n d·ª±a tr√™n s·ªë d∆∞ c≈© + payout.
                    // C√°ch t·ªët nh·∫•t l√† fetch l·∫°i sau khi transaction ƒë√£ commit ho·∫∑c d√πng m·ªôt gi√° tr·ªã ∆∞·ªõc t√≠nh.
                    // V√¨ ƒë√¢y l√† trong transaction, ch√∫ng ta c√≥ th·ªÉ d√πng gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c increment.
                    // Tuy nhi√™n, ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n, t√¥i s·∫Ω t√≠nh to√°n l·∫°i d·ª±a tr√™n gi√° tr·ªã c≈© + payout.
                    const currentSellerCoins = sellerUser.pokecoins + sellerPayout; 
                    
                    const sellerDMChannel = await client.users.fetch(listing.seller_discord_id);
                    const sellerEmbed = new EmbedBuilder()
                        .setColor(0x00FF00) // M√†u xanh l√° c√¢y cho DM th√†nh c√¥ng
                        .setTitle('üí∞ Listing c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c b√°n!')
                        .setDescription(`Listing **${itemDisplayName}** (M√£: \`${listingId}\`) c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c b√°n cho <@${buyerId}> v·ªõi gi√° **${listing.price} Pokecoin**.\nB·∫°n nh·∫≠n ƒë∆∞·ª£c **${sellerPayout} Pokecoin**.`);
                    sellerEmbed.addFields(
                        { name: 'V·∫≠t ph·∫©m', value: itemDisplayName, inline: true },
                        { name: 'Gi√° b√°n', value: `${listing.price} Pokecoin`, inline: true },
                        { name: 'Ph√≠ Marketplace (10%)', value: `${listing.price - sellerPayout} Pokecoin`, inline: true },
                        { name: 'B·∫°n ƒë√£ nh·∫≠n', value: `${sellerPayout} Pokecoin`, inline: true },
                        { name: 'S·ªë Pokecoin hi·ªán t·∫°i', value: `${currentSellerCoins} Pokecoin`, inline: false } // S·ª¨ D·ª§NG currentSellerCoins
                    );
                    await sellerDMChannel.send({ embeds: [sellerEmbed] });
                } catch (dmError) {
                    console.error(`[BUYMARKET_DM_ERROR] Kh√¥ng th·ªÉ g·ª≠i DM cho ng∆∞·ªùi b√°n ${listing.seller_discord_id}:`, dmError);
                    await message.channel.send({
                        content: `<@${buyerId}> (Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o DM cho ng∆∞·ªùi b√°n <@${listing.seller_discord_id}>.)`,
                        flags: MessageFlags.Ephemeral
                    }).catch(e => console.error("Could not send DM error message:", e));
                }
            }); // K·∫øt th√∫c transaction

        } catch (error) {
            console.error('[BUYMARKET_COMMAND_ERROR] L·ªói khi mua v·∫≠t ph·∫©m t·ª´ th·ªã tr∆∞·ªùng:', error);
            await message.channel.send({
                content: `<@${buyerId}> ƒê√£ c√≥ l·ªói x·∫£y ra khi mua v·∫≠t ph·∫©m n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.`,
                flags: MessageFlags.Ephemeral
            }).catch(e => console.error("Could not send generic buymarket error message:", e));
        }
    },
};
