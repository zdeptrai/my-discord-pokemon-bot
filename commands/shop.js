// commands/shop.js

const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, MessageFlags } = require('discord.js');
// Import db t·ª´ ../db.js ƒë·ªÉ d√πng chung instance DB
const { db } = require('../db'); 
const { sendOwnerDM } = require('../utils/errors/errorReporter'); // Import sendOwnerDM

const ITEMS_PER_PAGE = 10; // S·ªë v·∫≠t ph·∫©m hi·ªÉn th·ªã tr√™n m·ªói trang
const MESSAGE_LIFETIME = 5 * 60 * 1000; // Tin nh·∫Øn t·ªìn t·∫°i trong 5 ph√∫t (t√≠nh b·∫±ng miliseconds)
const CURRENCY_NAME = 'PokeCoin'; // ƒê∆°n v·ªã ti·ªÅn t·ªá c·ªßa b·∫°n

// H√†m t·∫°o Embed cho trang c·ª≠a h√†ng c·ª• th·ªÉ
async function createShopEmbed(page, totalPages, items, author) {
    const shopEmbed = new EmbedBuilder()
        .setColor('#0099ff')
        .setTitle('üõçÔ∏è C·ª≠a H√†ng V·∫≠t Ph·∫©m')
        .setDescription('D∆∞·ªõi ƒë√¢y l√† c√°c v·∫≠t ph·∫©m c√≥ s·∫µn ƒë·ªÉ mua:') // B·ªè th√¥ng tin trang ·ªü ƒë√¢y
        .setTimestamp()
        // Di chuy·ªÉn th√¥ng tin trang xu·ªëng footer
        .setFooter({ text: `Trang ${page}/${totalPages} | Y√™u c·∫ßu b·ªüi ${author.username}`, iconURL: author.displayAvatarURL() });

    items.forEach(item => {
        let itemDescription = item.description || 'Kh√¥ng c√≥ m√¥ t·∫£.';
        if (item.type) {
            itemDescription = `**Lo·∫°i:** ${item.type}\n${itemDescription}`;
        }

        // Lo·∫°i b·ªè ph·∫ßn sprite_url ·ªü ƒë√¢y
        shopEmbed.addFields(
            {
                name: `${item.name} (ID: ${item.item_id})`,
                value: `**Gi√°:** ${item.value} ${CURRENCY_NAME}\n${itemDescription}`, // S·ª≠ d·ª•ng CURRENCY_NAME
                inline: false,
            }
        );
    });

    return shopEmbed;
}

// H√†m t·∫°o h√†ng n√∫t ƒëi·ªÅu khi·ªÉn
function createShopButtons(currentPage, totalPages) {
    const row = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('shop_previous_page')
                .setLabel('Trang tr∆∞·ªõc')
                .setStyle(ButtonStyle.Primary)
                .setDisabled(currentPage === 1),
            new ButtonBuilder()
                .setCustomId('shop_next_page')
                .setLabel('Trang sau')
                .setStyle(ButtonStyle.Primary)
                .setDisabled(currentPage === totalPages)
        );
    return row;
}

module.exports = {
    name: 'shop',
    description: 'Hi·ªÉn th·ªã c√°c v·∫≠t ph·∫©m c√≥ s·∫µn trong c·ª≠a h√†ng.',
    aliases: ['store', 'items'],
    usage: '',
    cooldown: 5,

    async execute(message, args, client) { 
        const userId = message.author.id; // L·∫•y userId ƒë·ªÉ s·ª≠ d·ª•ng cho tin nh·∫Øn ephemeral

        try {
            let currentPage = 1;

            const totalItemsResult = await db('items')
                .where('value', '>', 0)
                .count('item_id as count')
                .first();
            const totalItems = parseInt(totalItemsResult.count);
            const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);

            if (totalPages === 0) {
                return message.channel.send({
                    content: `<@${userId}> Hi·ªán t·∫°i kh√¥ng c√≥ v·∫≠t ph·∫©m n√†o trong c·ª≠a h√†ng.`,
                    flags: MessageFlags.Ephemeral
                });
            }

            const initialItems = await db('items')
                .where('value', '>', 0)
                .select('item_id', 'name', 'description', 'type', 'value', 'sprite_url')
                .limit(ITEMS_PER_PAGE)
                .offset(0)
                .orderBy('item_id', 'asc');

            const initialEmbed = await createShopEmbed(currentPage, totalPages, initialItems, message.author);
            const initialButtons = createShopButtons(currentPage, totalPages);

            const shopMessage = await message.channel.send({
                embeds: [initialEmbed],
                components: [initialButtons],
                fetchReply: true
            });

            const collector = shopMessage.createMessageComponentCollector({
                filter: i => i.user.id === message.author.id && (i.customId === 'shop_previous_page' || i.customId === 'shop_next_page'), // Ch·ªâ l·ªçc c√°c customId c·ªßa ph√¢n trang
                time: MESSAGE_LIFETIME,
                idle: MESSAGE_LIFETIME
            });

            collector.on('collect', async i => {
                // ƒê√É B·ªé: await i.deferUpdate(); // handlers/interactionCreate.js s·∫Ω b·ªè qua defer, i.update() s·∫Ω t·ª± defer/acknowledge

                let newPage = currentPage; // S·ª≠ d·ª•ng currentPage thay v√¨ page
                if (i.customId === 'shop_previous_page') {
                    newPage--;
                } else if (i.customId === 'shop_next_page') {
                    newPage++;
                }

                if (newPage < 1) newPage = 1;
                if (newPage > totalPages) newPage = totalPages;

                if (newPage === currentPage) { // N·∫øu trang kh√¥ng ƒë·ªïi, ch·ªâ c·∫ßn acknowledge t∆∞∆°ng t√°c
                    try {
                        await i.update({}); // G·ª≠i m·ªôt update r·ªóng ƒë·ªÉ acknowledge t∆∞∆°ng t√°c
                    } catch (updateError) {
                        if (updateError.code === 10062 || updateError.code === 40060) {
                            console.warn(`[SHOP_COLLECTOR_WARN] T∆∞∆°ng t√°c ƒë√£ h·∫øt h·∫°n ho·∫∑c ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω: ${updateError.code}`);
                        } else {
                            console.error(`[SHOP_COLLECTOR_ERROR] L·ªói khi c·∫≠p nh·∫≠t t∆∞∆°ng t√°c r·ªóng cho ${userId}:`, updateError);
                            sendOwnerDM(client, `[L·ªói Shop Collector] L·ªói khi c·∫≠p nh·∫≠t t∆∞∆°ng t√°c r·ªóng cho ${userId}.`, updateError);
                        }
                    }
                    return;
                }

                currentPage = newPage; // C·∫≠p nh·∫≠t currentPage

                const newOffset = (currentPage - 1) * ITEMS_PER_PAGE;
                const newItems = await db('items')
                    .where('value', '>', 0)
                    .select('item_id', 'name', 'description', 'type', 'value', 'sprite_url')
                    .limit(ITEMS_PER_PAGE)
                    .offset(newOffset)
                    .orderBy('item_id', 'asc');

                const newEmbed = await createShopEmbed(currentPage, totalPages, newItems, message.author);
                const newButtons = createShopButtons(currentPage, totalPages);

                try {
                    await i.update({ // S·ª≠ d·ª•ng i.update() ƒë·ªÉ ch·ªânh s·ª≠a tin nh·∫Øn t∆∞∆°ng t√°c
                        embeds: [newEmbed],
                        components: [newButtons]
                    });
                } catch (updateError) {
                    if (updateError.code === 10062 || updateError.code === 40060) {
                        console.warn(`[SHOP_COLLECTOR_WARN] T∆∞∆°ng t√°c ƒë√£ h·∫øt h·∫°n ho·∫∑c ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω: ${updateError.code}`);
                    } else {
                        console.error(`[SHOP_COLLECTOR_ERROR] L·ªói khi c·∫≠p nh·∫≠t tin nh·∫Øn shop trong collector cho ${userId}:`, updateError);
                        sendOwnerDM(client, `[L·ªói Shop Collector] L·ªói khi c·∫≠p nh·∫≠t tin nh·∫Øn ph√¢n trang cho ${userId}.`, updateError);
                    }
                }
            });

            collector.on('end', async collected => {
                // Khi collector k·∫øt th√∫c (h·∫øt th·ªùi gian), v√¥ hi·ªáu h√≥a c√°c n√∫t
                try {
                    // Ki·ªÉm tra xem tin nh·∫Øn c√≥ c√≤n t·ªìn t·∫°i v√† c√≥ th·ªÉ ch·ªânh s·ª≠a kh√¥ng
                    const fetchedMessage = await message.channel.messages.fetch(shopMessage.id).catch(() => null);
                    if (fetchedMessage && fetchedMessage.editable) { 
                        const disabledComponents = fetchedMessage.components.map(row => { // S·ª≠ d·ª•ng fetchedMessage.components
                            return ActionRowBuilder.from(row).setComponents(
                                row.components.map(component => ButtonBuilder.from(component).setDisabled(true))
                            );
                        });
                        await fetchedMessage.edit({ components: disabledComponents });
                        console.log(`[SHOP] C√°c n√∫t tr√™n tin nh·∫Øn c·ª≠a h√†ng c·ªßa ${message.author.username} ƒë√£ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a sau ${MESSAGE_LIFETIME / 1000} gi√¢y.`);
                    }
                } catch (editError) {
                    // B·∫Øt l·ªói Unknown Message (10008) n·∫øu tin nh·∫Øn ƒë√£ b·ªã x√≥a
                    if (editError.code === 10008) {
                        console.warn(`[SHOP_COLLECTOR_WARN] Tin nh·∫Øn c·ª≠a h√†ng ƒë√£ b·ªã x√≥a, kh√¥ng th·ªÉ v√¥ hi·ªáu h√≥a n√∫t.`);
                    } else {
                        console.error('Kh√¥ng th·ªÉ v√¥ hi·ªáu h√≥a n√∫t tr√™n tin nh·∫Øn c·ª≠a h√†ng:', editError);
                        sendOwnerDM(client, `[L·ªói Shop Collector End] L·ªói khi v√¥ hi·ªáu h√≥a n√∫t cho ${userId}.`, editError);
                    }
                }
            });

        } catch (error) {
            console.error('[SHOP_COMMAND_ERROR] L·ªói khi hi·ªÉn th·ªã c·ª≠a h√†ng:', error);
            sendOwnerDM(client, `[L·ªói Shop Command] L·ªói khi ng∆∞·ªùi d√πng ${userId} s·ª≠ d·ª•ng l·ªánh shop.`, error);
            await message.channel.send({
                content: `<@${userId}> ƒê√£ x·∫£y ra l·ªói khi c·ªë g·∫Øng hi·ªÉn th·ªã c·ª≠a h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.`,
                flags: MessageFlags.Ephemeral
            });
        }
    },
};
